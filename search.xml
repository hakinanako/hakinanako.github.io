<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式</title>
      <link href="/2023/07/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/07/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="三大类设计模式"><a href="#三大类设计模式" class="headerlink" title="三大类设计模式"></a>三大类设计模式</h2><ul><li><strong>创建型模式</strong><br>将对象的创建和使用分离。包括单例，原型，工厂方法，抽象方法，建造者等5种。</li><li><strong>结构型模式</strong><br>描述如何将类或对象按某种布局组成更大的结构。包括代理，适配器，桥接，装饰，外观，享元，组合等7种。</li><li><strong>行为型模式</strong><br>描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。包括模板方法，策略，命令，职责链，状态，观察者，中介者，迭代器，访问者，备忘录，解释器等11种。</li></ul><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>UML包括用例图，类图，对象图，顺序图，协作图，状态图，活动图，时序图，协作图，构件图，部署图等。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p>类图描述了系统中的类，类的内部结构以及类和类之间的关系。类图是<strong>静态</strong>的。  </p><table><thead><tr><th align="left"><strong>Employee</strong></th></tr></thead><tbody><tr><td align="left"><em>成员变量</em> <br/>-name:String<br/>-age:int</td></tr><tr><td align="left"><em>成员方法</em> <br/> +work():void</td></tr></tbody></table><p>其中，成员变量的表示格式为：<code>可见性 名称：类型[可省 =默认值]</code>，其中<code>-</code>表示private，<code>+</code>表示public，<code>#</code>表示protected，不加表示默认权限。<br>成员方法的表示格式为：<code>可见性 名称(参数列表)[可省 :返回值类型]</code>。权限符号同上。</p><ul><li>类之间的表示<ul><li>关联关系：实线+箭头，表示一个类知道另一个类的存在，但是不一定知道对方的细节。<br>另外，双向关联可以直接用直线表示。比如<strong>用户和订单</strong>，用户可以查看订单，订单也可以查看用户。</li><li>泛化&#x2F;继承关系：实线+空心三角形，表示一个类<strong>继承</strong>另一个类。是耦合度最大的一种关系。</li><li>实现关系：虚线+空心三角形，表示一个类<strong>实现</strong>了一个接口。</li><li>依赖关系：虚线+箭头，表示一个类<strong>使用</strong>了另一个类。比如司机使用汽车。**(常用)**</li><li>聚合关系：实线+空心菱形+箭头，表示一个类<strong>包含</strong>另一个类，但是另一个类<strong>不是</strong>这个类的一部分。<br>聚合关系与整体和部分的关系，比如学校和老师，学校包含老师，但是老师不是学校的一部分。（老师本身就是老师，不是学校的一部分）</li><li>组合关系：实线+实心菱形+箭头，表示一个类<strong>包含</strong>另一个类，另一个类<strong>是</strong>这个类的一部分。<strong>（少用）</strong><br>组合是加强的聚合，一旦整体不存在了，部分也不存在了。比如人和大脑，人包含大脑，大脑是人的一部分。</li></ul></li></ul><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p><strong>对扩展开放，对修改关闭。</strong>。或者说，实现一个热插拔的效果，即在不修改原有代码的基础上，去增加新的功能。<br>具体实现方式为多使用抽象类和接口，而不是具体实现类。</p><p><strong>Example：皮肤的切换</strong><br>抽象类 - 皮肤类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractSkin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原始实现类 - 默认皮肤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSkin</span> <span class="keyword">extends</span> <span class="title class_">AbstractSkin</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认皮肤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自定义皮肤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomSkin</span> <span class="keyword">extends</span> <span class="title class_">AbstractSkin</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义皮肤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入法类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputMethod</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractSkin skin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSkin</span><span class="params">(AbstractSkin skin)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.skin = skin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        skin.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切换皮肤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InputMethod</span> <span class="variable">inputMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputMethod</span>();</span><br><span class="line">        inputMethod.setSkin(<span class="keyword">new</span> <span class="title class_">DefaultSkin</span>());</span><br><span class="line">        inputMethod.display();</span><br><span class="line">        inputMethod.setSkin(<span class="keyword">new</span> <span class="title class_">CustomSkin</span>());</span><br><span class="line">        inputMethod.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="里氏代换"><a href="#里氏代换" class="headerlink" title="里氏代换"></a>里氏代换</h3><p>子类可以扩展父类的功能，但不能改变父类原有的功能。子类尽量不要重写父类的方法。<br>比如正方形和长方形，正方形继承长方形。长方形有长和宽两个属性，正方形只有一个边长属性。正方形重写了父类长和宽的set方法，使得长和宽都是边长。这就违反了里氏代换原则。<br>相较于继承，更适合的应该是接口的实现。接口是一种规范，通过实现接口，来实现某种功能。比如长方形和正方形都实现了一个接口，接口中有一个方法，用来计算面积。长方形和正方形都实现了这个方法，但是实现的方式不同。这样就不会违反里氏代换原则。</p><h3 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h3><p>高层模块不应该依赖低层模块，二者都应该依赖其抽象。<br>比如，A类里声明了一个B类的对象，那么A类就依赖于B类，那么A类就是高层模块，B类就是低层模块。<br>就像组装电脑，我们需要组装CPU，显卡，内存，硬盘等等，这些都是低层模块，而我们组装的电脑就是高层模块，CPU等低层模块可以有多种选择。<br>依赖倒置原则的核心思想是：<strong>面向接口编程</strong>。</p><h3 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h3><p>客户端不应该依赖它不需要的接口。同时，类间的依赖关系应该建立在最小的接口上。<br>比如A类和B类，A类只需要B类的一个方法，但是B类有很多方法，那么A类就被迫实现了B类的所有方法，这就违反了接口隔离原则。<br>接口隔离原则的核心思想是：<strong>接口要小而专，不要大而全</strong>。那么这里的B类就应该拆分成多个接口，A类只需要实现自己需要的接口即可。</p><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>一个软件实体应当尽可能少地与其他实体发生相互作用。<br>当前对象本身，当前对象的成员对象，当前对象创建的对象，当前对象的方法参数，这些对象同当前对象存在关联，聚合或者组合关系，可以直接访问这些对象的方法。<br>举例来说，明星，粉丝，媒体公司和经纪人，经纪人中声明了明星，粉丝和媒体公司的对象，那么经纪人就可以直接访问明星，粉丝和媒体公司的方法。而粉丝和媒体公司等之间没有关联，那么粉丝和媒体公司就不能直接访问对方的方法。</p><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>尽量使用组成&#x2F;聚合的方式，而不是使用继承。<br>为什么不使用继承？因为继承是一种强耦合的方式，父类的变化会影响到子类。而组合&#x2F;聚合是一种弱耦合的方式，父类的变化不会影响到子类。</p><ul><li>继承破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，子类可以直接访问父类的实现细节。</li><li>耦合度高。父类的实现细节一旦发生变化，子类也会发生变化。</li></ul><p>而组合&#x2F;聚合是一种弱耦合的方式，父类的变化不会影响到子类。</p><ul><li>维持了封装性。因为父类的实现细节不会暴露给子类。</li><li>耦合度低。父类的实现细节发生变化，子类不会发生变化。可以在类的成员位置声明抽象。</li></ul><p>比如汽车的分类，可以按照动力源分为汽油车和电动车，按照车身结构分为轿车和客车，按照颜色又可以分为白色，黑色等。<br>如果使用继承，那么就需要创建很多个类，汽车有子类汽油车和电动车，汽油车和电动车又有各自的子类白色汽油车，黑色汽油车，白色电动车，黑色电动车等等。<br>如果使用组合&#x2F;聚合，那么就只需要创建汽车类，汽车类中有动力源，颜色。使用接口聚合来实现动力源和颜色。<br>聚合的意义就在于扩展，如果需要增加新的动力源，只需要实现动力源接口即可，不需要修改汽车类。如果需要增加新的颜色，只需要实现颜色接口即可，不需要修改汽车类。</p><h2 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h2><p>创建者模式关注如何创建对象，将对象的创建和使用分离。主要分为五大类：</p><ul><li>单例模式</li><li>工厂方法模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>原型模式</li></ul><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成</title>
      <link href="/2023/06/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
      <url>/2023/06/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>&#x3D;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode</title>
      <link href="/2023/04/29/leetcode/"/>
      <url>/2023/04/29/leetcode/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/wiggle-subsequence/description/?orderBy=most_votes">376-摆动序列</a></p><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p><ul><li><p>例如， <code>[1, 7, 4, 9, 2, 5]</code> 是一个 摆动序列 ，因为差值 <code>(6, -3, 5, -7, 3)</code> 是正负交替出现的。</p></li><li><p>相反，<code>[1, 4, 7, 2, 5]</code> 和 <code>[1, 7, 4, 5, 5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。<br><strong>子序列</strong> 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p></li></ul><p>给你一个整数数组 nums ，返回 nums 中作为 摆动序列 的 最长子序列的长度 。</p><p>示例 1：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,7,4,9,2,5]</span><br><span class="line">输出：6</span><br><span class="line">解释：整个序列均为摆动序列，各元素之间的差值为 (6, -3, 5, -7, 3) 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,17,5,10,13,15,10,5,16,8]</span><br><span class="line">输出：7</span><br><span class="line">解释：这个序列包含几个长度为 7 摆动序列。</span><br><span class="line">其中一个是 [1, 17, 10, 13, 10, 16, 8] ，各元素之间的差值为 (16, -7, 3, -3, 6, -8) 。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,4,5,6,7,8,9]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 1000</li><li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 1000如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</li></ul><p>题解：<br>从数组第二个元素开始遍历，每一层循环中做的事有：</p><ol><li>跳过平坡，即遇到相等元素直接跳过</li><li>记录上一次是上坡还是下坡</li><li>若上一次是上坡，则只记录下坡，反之则只记录上坡 相当于只记录上坡和下坡数之和。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wiggleMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">// if(nums.length==1)</span></span><br><span class="line">        <span class="comment">//     return 1;</span></span><br><span class="line">        <span class="comment">//记录比较的趋势，开始为0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">trend</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;nums.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//从每一个元素开始做起始，记录找到最长序列</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                cur = nums[i]-nums[i+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(cur&lt;<span class="number">0</span>&amp;&amp; trend&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    trend = -<span class="number">1</span>;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur&gt;<span class="number">0</span>&amp;&amp;trend&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    trend = <span class="number">1</span>;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;                                   </span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/maximum-tastiness-of-candy-basket/description/">2517. 礼盒的最大甜蜜度</a><br>   给你一个正整数数组 <code>price</code> ，其中 <code>price[i]</code> 表示第 <code>i</code> 类糖果的价格 ，另给你一个正整数 <code>k</code> 。<br>商店组合 <code>k</code> 类 <strong>不同</strong> 糖果打包成礼盒出售。礼盒的 <strong>甜蜜度</strong> 是礼盒中任意两种糖果 价格 绝对差的最小值。</p><p>返回礼盒的 <strong>最大</strong> 甜蜜度。</p><p>示例 1：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：price = [13,5,1,8,21,2], k = 3</span><br><span class="line">输出：8</span><br><span class="line">解释：选出价格分别为 [13,5,21] 的三类糖果。</span><br><span class="line">礼盒的甜蜜度为 min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8 。</span><br><span class="line">可以证明能够取得的最大甜蜜度就是 8 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：price = [1,3,1], k = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：选出价格分别为 [1,3] 的两类糖果。</span><br><span class="line">礼盒的甜蜜度为 min(|1 - 3|) = min(2) = 2 。</span><br><span class="line">可以证明能够取得的最大甜蜜度就是 2 。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：price = [7,7,7,7], k = 2</span><br><span class="line">输出：0</span><br><span class="line">解释：从现有的糖果中任选两类糖果，甜蜜度都会是 0 。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>2 &lt;&#x3D; k &lt;&#x3D; price.length &lt;&#x3D; 105</li><li>1 &lt;&#x3D; price[i] &lt;&#x3D; 109</li></ul><p>题解：<br>易知当甜度值<code>ans</code>越小时，更容易取得更长的<code>k</code>,即ans与k的函数具有单调性 &#x3D;&gt; 二分  </p><ol><li>二分范围：[0,price[-1]-price[0]&#x2F;&#x2F;(K-1)]<br>因为最大值，当需要取k类时，则有差值 (甜蜜度) k-1段，最大差值&#x2F;段数 &#x3D;&gt; 最大值</li><li>check 检查 从price的第一个元素开始，遍历<br>f 方法的作用是在给定差值 d 的情况下，计算 price 数组中最多能选择多少个元素。具体来说，该方法首先将变量 cnt 初始化为 1，表示至少要选择一个元素。然后遍历 price 数组中的每个元素 p，如果 p 与上一个被选择的元素的价格的差值不小于 d，说明 p 可以被选择，将 cnt 加 1，并将上一个被选择的元素的价格赋值为 p。遍历完成后，返回 cnt。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumTastiness</span><span class="params">(<span class="type">int</span>[] price, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Arrays.sort(price);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = (price[price.length - <span class="number">1</span>] - price[<span class="number">0</span>]) / (k - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left + <span class="number">1</span> &lt; right) &#123; </span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (f(price, mid) &gt;= k) left = mid; </span><br><span class="line">            <span class="keyword">else</span> right = mid; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span>[] price, <span class="type">int</span> d)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">1</span>, pre = price[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p : price) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p &gt;= pre + d) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                pre = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p><a href="https://leetcode.cn/problems/can-make-palindrome-from-substring/description/">1177. 构建回文串检测</a></p><p>给你一个字符串 s，请你对 s 的子串进行检测。</p><p>每次检测，待检子串都可以表示为 queries[i] &#x3D; [left, right, k]。我们可以 重新排列 子串 s[left], …, s[right]，并从中选择 最多 k 项替换成任何小写英文字母。<br>如果在上述检测过程中，子串可以变成回文形式的字符串，那么检测结果为 true，否则结果为 false。</p><p>返回答案数组 answer[]，其中 answer[i] 是第 i 个待检子串 queries[i] 的检测结果。</p><p>注意：在替换时，子串中的每个字母都必须作为 独立的 项进行计数，也就是说，如果 s[left..right] &#x3D; “aaa” 且 k &#x3D; 2，我们只能替换其中的两个字母。（另外，任何检测都不会修改原始字符串 s，可以认为每次检测都是独立的）</p><p>示例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abcda&quot;, queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]</span><br><span class="line">输出：[true,false,false,true,true]</span><br><span class="line">解释：</span><br><span class="line">queries[0] : 子串 = &quot;d&quot;，回文。</span><br><span class="line">queries[1] : 子串 = &quot;bc&quot;，不是回文。</span><br><span class="line">queries[2] : 子串 = &quot;abcd&quot;，只替换 1 个字符是变不成回文串的。</span><br><span class="line">queries[3] : 子串 = &quot;abcd&quot;，可以变成回文的 &quot;abba&quot;。 也可以变成 &quot;baab&quot;，先重新排序变成 &quot;bacd&quot;，然后把 &quot;cd&quot; 替换为 &quot;ab&quot;。</span><br><span class="line">queries[4] : 子串 = &quot;abcda&quot;，可以变成回文的 &quot;abcba&quot;。  </span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><code>1 &lt;= s.length, queries.length &lt;= 10^5</code></li><li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt; s.length</code></li><li><code>0 &lt;= queries[i][2] &lt;= s.length</code></li><li><code>s</code> 中只有小写英文字母</li></ul><p>包含区间的问题 &#x3D;&gt; 考虑前缀和<br>有数组S 长度为n，则有S[0<del>i] - S[0</del>k] &#x3D; S[k~i] (i&gt;k);<br>也就是说，任意区间可以用两个前缀表示。  显然这里的字符子串也是可以用前缀和实现的。</p><p>由题，在子串内可以任意重新排列字符，故影响是否为回文串的要素就是 &#x3D;&gt;   某字符其数量的奇偶。对于偶数字符不需要操作，而对于奇数字符，需要执行替换操作。<br>具体的，替换次数为<code>(x-1)/2</code>,若替换次数小于k则说明回文成立。</p><p>所以，我们定义一个二维数组<code>ss</code>用于处理前缀中每个字符出现的次数，<code>ss[i][j]</code>,其中i为末尾索引，j为字符，值为字符出现次数。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] prefix = <span class="keyword">new</span> <span class="title class_">int</span>[s.length() + <span class="number">1</span>][<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123;</span><br><span class="line">        prefix[i + <span class="number">1</span>][j] = prefix[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    prefix[i + <span class="number">1</span>][s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Boolean&gt; <span class="title function_">canMakePaliQueries</span><span class="params">(String s, <span class="type">int</span>[][] queries)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建前缀</span></span><br><span class="line">        <span class="comment">//i+1 代表前i个字符</span></span><br><span class="line">        <span class="type">int</span>[][] prefix = <span class="keyword">new</span> <span class="title class_">int</span>[s.length() + <span class="number">1</span>][<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length() + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            prefix[i] = prefix[i - <span class="number">1</span>].clone();</span><br><span class="line">            prefix[i][s.charAt(i - <span class="number">1</span>) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Boolean&gt; booleans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] q : queries) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> q[<span class="number">0</span>], r = q[<span class="number">1</span>], k = q[<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j) &#123;</span><br><span class="line">                x += (prefix[r + <span class="number">1</span>][j] - prefix[l][j]) &amp; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            booleans.add(x / <span class="number">2</span> &lt;= k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> booleans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化</strong><br>由于只关心每种字母出现次数的奇偶性，所以不需要在前缀和中存储每种字母的出现次数，只需要保存每种字母出现次数的奇偶性。<br>为方便计算，用 <code>0</code> 表示出现偶数次，用 <code>1</code> 表示出现奇数次。<br>注意只有奇数减偶数，或者偶数减奇数，才能得到奇数。所以如果相减的结果不为 <code>0</code>（或者说相减的两个数不相等），就表示出现了奇数次。<br>由于异或运算满足 111 和 000 的结果是 111，而 000 和 000，以及 111 和 111 的结果都是 000，所以可以用异或替换上面的减法。<br><a href="https://leetcode.cn/problems/can-make-palindrome-from-substring/solutions/2309725/yi-bu-bu-you-hua-cong-qian-zhui-he-dao-q-yh5p/">题解</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Negix</title>
      <link href="/2023/04/25/Negix/"/>
      <url>/2023/04/25/Negix/</url>
      
        <content type="html"><![CDATA[<h2 id="Negix主要用于实现三个功能"><a href="#Negix主要用于实现三个功能" class="headerlink" title="Negix主要用于实现三个功能"></a>Negix主要用于实现三个功能</h2><ul><li>请求转发</li><li>负载均衡</li><li>动静分离</li></ul><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p><strong>正向代理</strong><br>比如我们要看推特，看GitHub等等。我们直接用国内的服务器无法访问国外的服务器，或者是访问很慢。所以我们需要在本地搭建一个服务器来帮助我们去访问。那这种就是正向代理。<br>正向代理的过程，隐藏了真实的客户端。客户端请求的服务都被代理服务器代替来请求</p><p><strong>反向代理</strong><br>比如：我们访问淘宝的时候，淘宝内部肯定不是只有一台服务器，它的内部有很多台服务器，那我们进行访问的时候，因为服务器中间session不共享，我们在服务器之间访问需要频繁登录。<br>这时，淘宝搭建一个过渡服务器，对我们是没有任何影响的，我们登录一次，但是能访问所有，这种情况就是反向代理。对我们来说，客户端对代理是无感知的，客户端不需要任何配置就可以访问，我们只需要把请求发送给反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器的地址。</p><p>Negix便是一个高性能的HTTP和反向代理web服务器</p><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><p>Negix服务器对外暴露Negix代理服务器的地址，将客户端的不同请求转发到内部的不同目标服务器中，然后再通过代理服务器返回数据。<br>客户端<strong>只能访问Negix服务器</strong>，由Negix根据规则进行请求转发。<br>常用的规则如<strong>路径匹配</strong>，根据路径地址中是否包含相应字符串来决定转发到哪个目标服务器。</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>负载均衡，把大量的请求按照我们指定的方式<strong>均衡</strong>的分配给集群中的每台服务器，从而不会产生集群中大量请求只请求某一台服务器的情况。  </p><h2 id="负载均衡常用算法"><a href="#负载均衡常用算法" class="headerlink" title="负载均衡常用算法"></a>负载均衡常用算法</h2><ol><li>轮询(Negix中默认)<br> 轮询为负载均衡中较为基础也较为简单的算法，它不需要配置额外参数。假设配置文件中共有 台服务器，该算法遍历服务器节点列表，并按节点次序每轮选择一台服务器处理请求。当所有节点均被调用过一次后，该算法将从第一个节点开始重新一轮遍历。<br> 但对于服务器性能不同的集群而言，该算法容易引发资源分配不合理等问题。</li><li>加权轮询<br> 为了避免普通轮询带来的弊端，加权轮询应运而生。在加权轮询中，每个服务器会有各自的 weight。一般情况下，weight 的值越大意味着该服务器的性能越好，可以承载更多的请求。该算法中，客户端的请求按权值比例分配，当一个请求到达时，优先为其分配权值最大的服务器。</li><li>最小连接数<br> 假设共有 台服务器，当有新的请求出现时，遍历服务器节点列表并选取其中连接数最小的一台服务器来响应当前请求。连接数可以理解为当前处理的请求数。</li><li>IP 哈希（IP hash）<br>ip_hash 依据发出请求的客户端 IP 的 hash 值来分配服务器，该算法可以保证同 IP 发出的请求映射到同一服务器，或者具有相同 hash 值的不同 IP 映射到同一服务器。</li></ol><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>Nginx动静分离，简单来说，就是动态请求和静态请求分开，也可以理解成使用Nginx处理静态页面，Tomcat 处理动态页面。<br>为了加快网站的解析速度，可以把动态页面和静态页面交给不同的服务器来解析，来加快解析速度，提高请求的访问效率，降低原来单个服务器的压力。这就是动静分离。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>nginx的启动端口号（如81）和nginx的监听端口号（如9001）是不一样的，功能也是不同的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2023/04/25/Java/"/>
      <url>/2023/04/25/Java/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring读取配置文件属性"><a href="#Spring读取配置文件属性" class="headerlink" title="Spring读取配置文件属性"></a>Spring读取配置文件属性</h2><p>@ConfigurationProperties和@Value注解用于获取配置文件中的属性定义并绑定到Java Bean或属性中</p><h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><p>使用@Value直接从配置文件中读取配置  </p><p>配置:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aliyun.oss.file.endpoint</span>=<span class="string"></span></span><br><span class="line"><span class="attr">aliyun.oss.file.keyId</span>=<span class="string"></span></span><br><span class="line"><span class="attr">aliyun.oss.file.keySecret</span>=<span class="string"></span></span><br><span class="line"><span class="attr">aliyun.oss.file.bucketName</span>=<span class="string"></span></span><br></pre></td></tr></table></figure><p>读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;aliyun.oss.file.endpoint&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String endpoint;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;aliyun.oss.file.keyid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String keyId;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;aliyun.oss.file.keysecret&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String keySecret;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;aliyun.oss.file.bucketname&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String bucketName;</span><br></pre></td></tr></table></figure><h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3><p>@ConfigurationProperties最适用于所有具有相同前缀的分层属性，用于将配置文件中固定<strong>前缀</strong>开头的属性绑定到POJO中,@Configuration也可以替换成@Component、@Service等其他注解。</p><p>Spring 使用一些宽松的规则来绑定属性。因此，以下变体都绑定到属性hostName</p><ul><li>mail.hostName</li><li>mail.hostname</li><li>mail.host_name</li><li>mail.host-name</li><li>mail.HOST_NAME</li></ul><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigProperties</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String hostName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// standard getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2023/04/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2023/04/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有人相爱，有人看海，有人dp做不出来</p></blockquote><h1 id="初入DP"><a href="#初入DP" class="headerlink" title="初入DP"></a>初入DP</h1><h2 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h2><p><a href="https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/">Leetcode-斐波那契</a><br>通过计算前面的一些项来得出序列中的指定项的值，即递推。一个比较熟悉的例子即斐波那契数列。<br>我们知道斐波那契数列有$f(n-1)+f(n)&#x3D;f(n+1)$，即</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 1 2 3 5 8 13....</span><br></pre></td></tr></table></figure><p>对于该数列，他的每一项都是由他的前两项推出的，构成了一个递推序列。类似这样的问题便可以用动态规划的思想解决。<br>动态规划就是通过拆分问题，定义问题状态和状态之间的关系（ 如上面的f(n),f(n-1),f(n+1)之间的关系），使得问题能够以递推（或者说分治）的方式去解决。<br>实际上，递推是一种最简单的状态转移。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">            <span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">31</span>];</span><br><span class="line">            f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                f[i] = f[i-<span class="number">1</span>]+f[i-<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> f[n];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用一个长度为31的数组f来存储Fibonacci数列的值。由于Fibonacci数列的定义，可以直接设置f[0] &#x3D; 0和f[1] &#x3D; 1。<br>接下来，从第2个位置开始循环计算数组中其他位置的值，直到计算到第n个位置。在每个位置上，都将该位置的值设置为前两个位置的值之和，即<br>$$f[i] &#x3D; f[i-1] + f[i-2]$$<br>最后，该方法返回数组中第n个位置的值，即Fibonacci数列的第n个数。</p><p>通过这个例子，我们大概知道了动态规划是一种怎样的算法。他包含以下几个要点</p><ul><li>定义状态：问题的状态表示具有特定含义的变量集合，它们描述了问题的局面和某些属性，通常使用一个或多个变量来表示问题的状态。</li><li>定义状态转移方程：状态转移方程描述了相邻两个状态之间的关系，以及如何从前一个状态转移到后一个状态。通常通过递推或者其他方式，将问题拆分成小的子问题，并使用已经解决的子问题的解来推导出当前问题的解。</li><li>定义初始状态：初始状态是最小的问题实例的解，它是递推或者其他方式的起点，通过递推或者其他方式，逐步推导出较大问题的解。</li></ul><h2 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h2><p><a href="https://leetcode.cn/problems/climbing-stairs/">Leetcode-爬楼梯</a>  </p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</span><br><span class="line"></span><br><span class="line">每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例 </span><br><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line"></span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶</span><br><span class="line">3. 2 阶 + 1 阶</span><br></pre></td></tr></table></figure><p>首先，由于每次只能爬1或2节台阶<br>则对于每一节台阶，从地面(0)到当前台阶(n)的总方案数为当前台阶的前1，2节台阶爬楼梯方案数之和。<br>则只需要对斐波那契代码稍作改造，有  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">            <span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">31</span>];</span><br><span class="line">            f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                f[i] = f[i-<span class="number">1</span>]+f[i-<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> f[n];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对初始值做了改变，f(n)为从0到当前台阶的总方案数，则有f(0)和f(1)均为1。</p><p>通过这两个例子可以知道，同一个问题是可以有不同问法的，但解法是相同的。类似这样的递推即最简单的动态规划了。</p><h2 id="使用最小花费爬楼梯"><a href="#使用最小花费爬楼梯" class="headerlink" title="使用最小花费爬楼梯"></a>使用最小花费爬楼梯</h2><p>动态规划不仅是求方案数的好方法，也非常适合用来求最值<br><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/description/?orderBy=most_votes">Leetcode-使用最小花费爬楼梯</a></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</span><br><span class="line"></span><br><span class="line">你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。</span><br><span class="line"></span><br><span class="line">请你计算并返回达到楼梯顶部的最低花费。</span><br><span class="line"></span><br><span class="line">示例 </span><br><span class="line"></span><br><span class="line">输入：cost = [1,100,1,1,1,100,1,1,100,1]</span><br><span class="line">输出：6</span><br><span class="line">解释：你将从下标为 0 的台阶开始。</span><br><span class="line">- 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。</span><br><span class="line">- 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。</span><br><span class="line">- 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。</span><br><span class="line">- 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。</span><br><span class="line">- 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。</span><br><span class="line">- 支付 1 ，向上爬一个台阶，到达楼梯顶部。</span><br><span class="line">总花费为 6 。</span><br></pre></td></tr></table></figure><p>显然这道题是上题的进阶，同样的我们可以选择向上爬一个或者两个台阶，那么某层台阶的状态就和其前一层，二层相关。在这道题中我们要考虑到是花费，设f(n)为爬到当前台阶的最小花费，则有两种情况：</p><ul><li>从前一层台阶n-1向上爬，花费为cost[n-1]，已支出为f(n-1)</li><li>从前二层台阶n-2向上爬，花费为cost[n-2]，已支出为f(n-2)</li></ul><p>求最小花费，则许村取二者中的较小值，因此有<br>$$f[n]&#x3D;min(f[n-1]+cost[n-1]，f[n-2]+cost[n-2])$$<br>得到爬到第n层的最小花费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostClimbingStairs</span><span class="params">(<span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1001</span>];</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">     <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(;n&lt;=cost.length;n++)&#123;</span><br><span class="line">     f[n]=Math.min(f[n-<span class="number">1</span>]+cost[n-<span class="number">1</span>],f[n-<span class="number">2</span>]+cost[n-<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> f[n-<span class="number">1</span>];&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上，可以说是动态规划的入门了。<br>对于动态规划问题，大致流程就是</p><ul><li>设计状态</li><li>状态转移方程</li><li>设定初始状态</li><li>执行状态转移</li><li>返回</li></ul><p>接下来的每道题都将会是这个模式，尽管他们可能不再简单。</p><h1 id="上一台阶"><a href="#上一台阶" class="headerlink" title="上一台阶"></a>上一台阶</h1><h2 id="最大字数组和"><a href="#最大字数组和" class="headerlink" title="最大字数组和"></a>最大字数组和</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</span><br><span class="line"></span><br><span class="line">子数组 是数组中的一个连续部分。</span><br><span class="line"></span><br><span class="line">示例 </span><br><span class="line"></span><br><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>设计状态<ul><li>设dp[i]</li></ul></li><li>状态转移方程</li><li>设定初始状态</li><li>执行状态转移</li><li>返回</li></ul><h1 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h1><p>2023&#x2F;04&#x2F;27 每日一题<br><a href="https://leetcode.cn/problems/longest-string-chain/description/">Leetcode-最长字符串链</a></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">给出一个单词数组 words ，其中每个单词都由小写英文字母组成。</span><br><span class="line"></span><br><span class="line">如果我们可以 不改变其他字符的顺序 ，在 wordA 的任何地方添加 恰好一个 字母使其变成 wordB ，那么我们认为 wordA 是 wordB 的 前身 。</span><br><span class="line"></span><br><span class="line">例如，&quot;abc&quot; 是 &quot;abac&quot; 的 前身 ，而 &quot;cba&quot; 不是 &quot;bcad&quot; 的 前身</span><br><span class="line">词链是单词 [word_1, word_2, ..., word_k] 组成的序列，k &gt;= 1，其中 word1 是 word2 的前身，word2 是 word3 的前身，依此类推。一个单词通常是 k == 1 的 单词链 。</span><br><span class="line"></span><br><span class="line">从给定单词列表 words 中选择单词组成词链，返回 词链的 最长可能长度 。</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">words = [&quot;a&quot;,&quot;b&quot;,&quot;ba&quot;,&quot;bca&quot;,&quot;bda&quot;,&quot;bdca&quot;]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长单词链之一为 [&quot;a&quot;,&quot;ba&quot;,&quot;bda&quot;,&quot;bdca&quot;]</span><br></pre></td></tr></table></figure><p>Q1 如何判断一个字符串是不是另一个字符串的前身？<br>    对于前身，必有**前身的长度加1等于字符串长度。<br>    遍历两个字符串，若某位置上字符相等，指针同时移动，不相等则只移动较长字符串的指针，当前身字符串指针走到串尾，判断较长字符串指针是否也走到了串尾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isContain</span><span class="params">(String cur,String pre)</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(cur.length()!=pre.length()+<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">           <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span>(i&lt;cur.length()&amp;&amp;j&lt;pre.length())&#123;</span><br><span class="line">              <span class="keyword">if</span>(cur.charAt(i) == pre.charAt(j))&#123;</span><br><span class="line">                   i++;</span><br><span class="line">                   j++;</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  i++;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;</span><br><span class="line">          <span class="keyword">return</span> j == pre.length();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>Q2 为什么是动态规划<br>    在这个问题中，最长的字符串链一定是由若干个长度递增的字符串组成的，这些字符串之间具有前后顺序关系。因此，可以将问题划分为一个个子问题，即以每个字符串为结尾的最长字符串链。由于子问题之间具有重叠性，因此可以采用动态规划的方法来求解。<br>    由此，我们设dp[i]为以字符串i为结尾的最长字符串链的大小。通过以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestStrChain</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">    Arrays.sort(words, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.length()-o2.length();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">     <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[words.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isContain(words[i], words[j])) &#123;</span><br><span class="line">                dp[i] = Math.max(dp[j]+<span class="number">1</span>,dp[i]);</span><br><span class="line">                res = Math.max(res,dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个问题中，可以遍历每个字符串 words[i]，并在之前的字符串 words[j]中查找是否有 words[j]为 words[i]的前身。<br>如果存在这样的字符串，那么可以将以字符串 words[j]结尾的最长字符串链的长度加 1，得到以字符串 words[i] 结尾的最长字符串链的长度 dp[i]，并与dp[i] 本身的值取最大值。因此，有状态转移方程<br>$$<br>    if(contains(words[i], words[j]))\<br> \quad dp[i] &#x3D; Math.max(dp[i], dp[j] + 1);<br>$$</p><p>最后找到所有状态 dp[i] 中的最大值，即为最长字符串链的长度。</p><h1 id="不同路径"><a href="#不同路径" class="headerlink" title="不同路径"></a>不同路径</h1><p><a href="https://leetcode-cn.com/problems/unique-paths/">Leetcode-不同路径</a></p><p><img src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png" alt="示意图"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">62. 不同路径</span><br><span class="line">一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</span><br><span class="line"></span><br><span class="line">机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</span><br><span class="line"></span><br><span class="line">问总共有多少条不同的路径？</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入：m = 3, n = 7</span><br><span class="line">输出：28</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：m = 3, n = 2</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">从左上角开始，总共有 3 条路径可以到达右下角。</span><br><span class="line">1. 向右 -&gt; 向下 -&gt; 向下</span><br><span class="line">2. 向下 -&gt; 向下 -&gt; 向右</span><br><span class="line">3. 向下 -&gt; 向右 -&gt; 向下</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：m = 7, n = 3</span><br><span class="line">输出：28</span><br><span class="line">示例 4：</span><br><span class="line"></span><br><span class="line">输入：m = 3, n = 3</span><br><span class="line">输出：6</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">1 &lt;= m, n &lt;= 100</span><br><span class="line">题目数据保证答案小于等于 2 * 109</span><br></pre></td></tr></table></figure><p>显然，一个格子的路径数等于其左边格子的路径数加上其上边格子的路径数。想到dp：<br>设<code>dp[i][j]</code>为到达<strong>i</strong>,<strong>j</strong>的路径数，那么有状态转移方程：<br><code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code></p><ul><li>初始 <code>dp[0][0] = 1</code></li><li>转移方程 <code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line"></span><br><span class="line">window.unitCount = $(<span class="string">&quot;.ncells h4&quot;</span>).index($(<span class="string">&quot;.currents&quot;</span>)) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 获取小节数量</span></span><br><span class="line">window.unit = $(<span class="string">&quot;.ncells h4&quot;</span>).length;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">frameObj</span> <span class="operator">=</span> $(<span class="string">&quot;iframe&quot;</span>).eq(<span class="number">0</span>).contents().find(<span class="string">&quot;iframe.ans-insertvideo-online&quot;</span>);</span><br><span class="line">    <span class="type">const</span> <span class="variable">videoNum</span> <span class="operator">=</span> frameObj.length;</span><br><span class="line">    <span class="keyword">if</span>(videoNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        console.log(<span class="string">&quot;%c当前小节中包含 &quot;</span> + videoNum + <span class="string">&quot; 个视频&quot;</span>,<span class="string">&quot;color:#FF7A38;font-size:18px&quot;</span>);</span><br><span class="line">        <span class="type">var</span> <span class="variable">v_done</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 添加事件处理程序</span></span><br><span class="line">        addEventListener(<span class="string">&quot;playdone&quot;</span> ,()=&gt;&#123;</span><br><span class="line">            v_done++;</span><br><span class="line">            <span class="keyword">if</span>(v_done &gt; videoNum)&#123;</span><br><span class="line">                <span class="comment">// 下一节</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(v_done &lt; videoNum)&#123;</span><br><span class="line">                watchVideo(frameObj, v_done)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                console.log(<span class="string">&quot;%c等待跳转至下一小节...&quot;</span>,<span class="string">&quot;font-size:18px&quot;</span>);nextUnit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 播放</span></span><br><span class="line">        watchVideo(frameObj, v_done);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(window.unitCount &lt; window.unit)&#123;</span><br><span class="line">            console.log(<span class="string">&quot;%c跳转至下一节&quot;</span>,<span class="string">&quot;font-size:18px&quot;</span>);</span><br><span class="line">            nextUnit();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            console.log(<span class="string">&quot;%c好&quot;</span>,<span class="string">&quot;color:red;font-size:18px&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function <span class="title function_">watchVideo</span><span class="params">(frameObj, v_done)</span>&#123;</span><br><span class="line">    <span class="comment">// 添加播放事件</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">playDoneEvent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">&quot;playdone&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取播放对象</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">v</span> <span class="operator">=</span> undefined;</span><br><span class="line">    v = frameObj.contents().eq(v_done).find(<span class="string">&quot;video#video_html5_api&quot;</span>).get(<span class="number">0</span>);window.a = v;</span><br><span class="line">    <span class="comment">// 设置倍速</span></span><br><span class="line">    <span class="keyword">try</span>&#123; v.playbackRate = <span class="number">8</span>;&#125;</span><br><span class="line">    <span class="keyword">catch</span>(e)&#123;console.error(<span class="string">&quot;倍速设置失败&quot;</span>+e); nextUnit(); <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="comment">// 播放</span></span><br><span class="line">    v.play();</span><br><span class="line">    console.log(<span class="string">&quot;%c正在 &quot;</span> + v.playbackRate + <span class="string">&quot; 倍速播放第 &quot;</span> + (v_done + <span class="number">1</span>) + <span class="string">&quot; 个视频&quot;</span>,<span class="string">&quot;font-size:18px&quot;</span>);</span><br><span class="line">    <span class="comment">// 循环获取播放进度</span></span><br><span class="line">    window.inter = setInterval(()=&gt;&#123;</span><br><span class="line">        v = window.a;</span><br><span class="line">        <span class="keyword">if</span>(v.currentTime &gt;= v.duration)&#123;</span><br><span class="line">            dispatchEvent(playDoneEvent);</span><br><span class="line">            clearInterval(window.inter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(v.paused)&#123;</span><br><span class="line">            v.play();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">function <span class="title function_">nextUnit</span><span class="params">()</span>&#123;</span><br><span class="line">    console.log(<span class="string">&quot;%c即将进入下一节...&quot;</span>,<span class="string">&quot;color:red;font-size:18px&quot;</span>);</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        $(document).scrollTop($(document).height()-$(window).height());</span><br><span class="line">        $(<span class="string">&quot;.orientationright&quot;</span>).click();</span><br><span class="line">        console.log(<span class="string">&quot;%c下一节&quot;</span>,<span class="string">&quot;color:red;font-size:18px&quot;</span>);<span class="comment">// (已经跳转&quot; +(++window.unitCount)+&quot;次)&quot;);</span></span><br><span class="line">        <span class="keyword">if</span>(window.unitCount++ &lt; window.unit)&#123; setTimeout(() =&gt; main(), <span class="number">10000</span>) &#125;</span><br><span class="line">    &#125;, <span class="number">6000</span>);</span><br><span class="line">&#125;</span><br><span class="line">console.log(<span class="string">&quot;%c %c %d %c个小节，当前%c第%d小节 %c-chao&quot;</span>, <span class="string">&quot;color:#6dbcff&quot;</span>, <span class="string">&quot;color:red&quot;</span>, window.unit, <span class="string">&quot;color:#6dbcff&quot;</span>, <span class="string">&quot;color:red&quot;</span>, window.unitCount, <span class="string">&quot;font-size:8px&quot;</span>);</span><br><span class="line">main();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java和IDEA的日常抽风</title>
      <link href="/2023/04/24/Java%E5%92%8CIDEA%E7%9A%84%E6%97%A5%E5%B8%B8%E6%8A%BD%E9%A3%8E/"/>
      <url>/2023/04/24/Java%E5%92%8CIDEA%E7%9A%84%E6%97%A5%E5%B8%B8%E6%8A%BD%E9%A3%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="4月24日-Failed-to-determine-a-suitable-driver-class"><a href="#4月24日-Failed-to-determine-a-suitable-driver-class" class="headerlink" title="4月24日 Failed to determine a suitable driver class"></a>4月24日 Failed to determine a suitable driver class</h2><p><strong>出现</strong><br>在一个SpringCloud项目里，启动子服务出现以下报错</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Failed to configure a DataSource: &#x27;url&#x27; attribute is not specified and no embedded datasource could be configured.</span><br><span class="line"></span><br><span class="line">Reason: Failed to determine a suitable driver cl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider the following:</span><br><span class="line">If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.</span><br><span class="line">If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).</span><br></pre></td></tr></table></figure><p><strong>原因</strong><br>在父项目的pom中引入了数据库相关依赖，由依赖传递<br><strong>解决</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Regiee</title>
      <link href="/2023/04/23/Regiee/"/>
      <url>/2023/04/23/Regiee/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="功能架构图"><a href="#功能架构图" class="headerlink" title="功能架构图"></a>功能架构图</h2><p><img src="https://img-blog.csdnimg.cn/00f39dbdd7d24d88b56c10eabeecdd7d.png" alt="在这里插入图片描述"></p><h1 id="数据库建库建表"><a href="#数据库建库建表" class="headerlink" title="数据库建库建表"></a>数据库建库建表</h1><h2 id="表说明"><a href="#表说明" class="headerlink" title="表说明"></a>表说明</h2><p><img src="https://img-blog.csdnimg.cn/ee424986569f45b6a071f1556bfe10b8.png" alt="在这里插入图片描述"></p><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="Maven搭建"><a href="#Maven搭建" class="headerlink" title="Maven搭建"></a>Maven搭建</h2><p>直接创建新工程<br>继承父工程的形式来做这个，这里新建父工程<br><img src="https://img-blog.csdnimg.cn/6e78719f1b0e465e816e50584a93d39c.png" alt="在这里插入图片描述"><br>pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        spring-boot--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reggie_take_out<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        jdk版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--json--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SQL驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--druid数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ccTakeOut</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ruiji?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">333</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span> <span class="comment"># 本地IP 或是 虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment">#    password: root</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span>  <span class="comment"># 默认使用 0号db</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">1800000</span>  <span class="comment"># 设置缓存数据的过期时间，30分钟</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，开启按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h2><p>创建测试类并启动<br><img src="https://img-blog.csdnimg.cn/8f3df341f8ed469a96de5831708a5fc5.png" alt="在这里插入图片描述"></p><h2 id="导入前端页面"><a href="#导入前端页面" class="headerlink" title="导入前端页面"></a>导入前端页面</h2><p><img src="https://img-blog.csdnimg.cn/d8af2e9f8b1f4c52b8b881801c5d8c3b.png" alt="在这里插入图片描述"></p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>在默认页面和前台页面的情况下，直接把这俩拖到resource目录下直接访问是访问不到的，因为被mvc框架拦截了<br>所以我们要编写一个映射类放行这些资源</p><h4 id="创建配置映射类"><a href="#创建配置映射类" class="headerlink" title="创建配置映射类"></a>创建配置映射类</h4><p><img src="https://img-blog.csdnimg.cn/434a4b66a3534624ae8576c71d5e43ac.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ddb9c62315e74bfba369d3812b957453.png" alt="在这里插入图片描述"></p><p>访问成功<br><img src="https://img-blog.csdnimg.cn/1a44e566a18b4da1bdbcb2e20abcd048.png" alt="在这里插入图片描述"></p><h1 id="后台开发"><a href="#后台开发" class="headerlink" title="后台开发"></a>后台开发</h1><h2 id="数据库实体类映射"><a href="#数据库实体类映射" class="headerlink" title="数据库实体类映射"></a>数据库实体类映射</h2><p>用mybatis plus来实现逆向工程<br>这里是老版本的逆向工程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.freemarker&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;freemarker&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">2.3</span><span class="number">.30</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">3.3</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--mybatis-plus 代码生成器依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">3.3</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>具体怎么玩看这里<br><a href="https://blog.csdn.net/weixin_48678547/article/details/123379415">MP逆向工程教程</a><br><img src="https://img-blog.csdnimg.cn/9063d65d4f074b488c44675c078965c2.png" alt="在这里插入图片描述"></p><h1 id="账户操作"><a href="#账户操作" class="headerlink" title="账户操作"></a>账户操作</h1><h2 id="登陆功能"><a href="#登陆功能" class="headerlink" title="登陆功能"></a>登陆功能</h2><p>前端页面<br><img src="https://img-blog.csdnimg.cn/018840778788414d802ec5309034a30b.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7981e9e300884b3285073d4072fdd775.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/aa04438900b64014a89cbcb2115d9463.png" alt="在这里插入图片描述"></p><p>数据库<br><img src="https://img-blog.csdnimg.cn/fbf6a0035c4c4e929e6736bb592abc1f.png" alt="在这里插入图片描述"><br>业务逻辑<br><img src="https://img-blog.csdnimg.cn/257ae0d260b2430b8890d054fc72b65a.png" alt="在这里插入图片描述"><br><strong>这里两个字符串的比较没法用!&#x3D;来实现</strong>，只能equals再取反来判断<br>直接上代码，这里没有涉及service层的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request 如果登陆成功把对象放入Session中，方便后续拿取</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee 利用<span class="doctag">@RequestBody</span>注解来解析前端传来的Json，同时用对象来封装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">    String password=employee.getPassword();</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> employee.getUsername();</span><br><span class="line">    log.info(<span class="string">&quot;登陆&quot;</span>);</span><br><span class="line">    <span class="comment">//MD5加密</span></span><br><span class="line">    <span class="type">MD5Util</span> <span class="variable">md5Util</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MD5Util</span>();</span><br><span class="line">    password=MD5Util.getMD5(password);</span><br><span class="line">    <span class="comment">//通过账户查这个员工对象，这里就不走Service层了</span></span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">    lambdaQueryWrapper.eq(Employee::getUsername, username);</span><br><span class="line">    Employee empResult=employeeService.getOne(lambdaQueryWrapper);</span><br><span class="line">        <span class="comment">//判断用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!empResult.getUsername().equals(username))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;账户不存在&quot;</span>);</span><br><span class="line">        <span class="comment">//密码是否正确</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!empResult.getPassword().equals(password))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;账户密码错误&quot;</span>);</span><br><span class="line">        <span class="comment">//员工账户状态是否正常，1状态正常，0封禁</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (empResult.getStatus()!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;当前账户正在封禁&quot;</span>);</span><br><span class="line">        <span class="comment">//状态正常允许登陆</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;登陆成功，账户存入session&quot;</span>);</span><br><span class="line">        <span class="comment">//员工id存入session，</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employ&quot;</span>,empResult.getId());</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体代码可以参考如下路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.cc.controller.EmployeeController</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_44062380/article/details/116103642">关于RequestBody何时使用</a></p><h2 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h2><p>点击退出<br><img src="https://img-blog.csdnimg.cn/09194dda97404a7db7a4438d056df2b6.png" alt="在这里插入图片描述"><br>删除session对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request 删除request作用域中的session对象，就按登陆的request.getSession().setAttribute(&quot;employ&quot;,empResult.getId());删除employee就行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">//尝试删除</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        request.getSession().removeAttribute(<span class="string">&quot;employ&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="comment">//删除失败</span></span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;登出失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;登出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完善登陆（添加过滤器）"><a href="#完善登陆（添加过滤器）" class="headerlink" title="完善登陆（添加过滤器）"></a>完善登陆（添加过滤器）</h2><p>这里的话用户直接url+资源名可以随便访问，所以要加个拦截器，没有登陆时，不给访问，自动跳转到登陆页面<br><img src="https://img-blog.csdnimg.cn/470f1c39f58f4cb09ee3878195622ca1.png" alt="在这里插入图片描述"><br>过滤器配置类注解 <code>@WebFilter(filterName=&quot;拦截器类名首字母小写&quot;，urlPartten=“要拦截的路径，比如/*”)</code><br><img src="https://img-blog.csdnimg.cn/4cf893fe589242eba9be0c206389bc18.png" alt="在这里插入图片描述">判断用户的登陆状态这块之前因为存入session里面有一个名为employee的对象，那么只需要看看这个session还在不在就知道他是否在登陆状态<br>注意，想存或者想获取的话，就都得用 <code>HttpServletRequest</code>的对象来进行获取，别的request对象拿不到的</p><p>这里提一嘴<br>调用Spring核心包的字符串匹配类的对象，对路径进行匹配，并且返回比较结果<br>如果相等就为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a4e9e841bb7c43179bbcb2905d172a2c.png" alt="在这里插入图片描述"><br>前端拦截器完成跳转到登陆页面，不在后端做处理<br><img src="https://img-blog.csdnimg.cn/f0a1667cce664c35b64925c48dfb59f0.png" alt="在这里插入图片描述"><br>代码太多了，给个路径好啦，直接去Gitee看<br>request的js代码路径：<code>resource/backend/js/request.js</code><br>拦截器的路径：<code>com.cc.filter.LoginCheckFilter</code></p><h2 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h2><p>新增员工功能，（前端对手机号和身份证号长度做了一个校验）<br><img src="https://img-blog.csdnimg.cn/966dd380180a47018ed362e125406271.png" alt="在这里插入图片描述"><br>请求 URL: <a href="http://localhost:9001/employee">http://localhost:9001/employee</a>  （POST请求）<br><img src="https://img-blog.csdnimg.cn/8bae2348243f4d0ebe58ce97aff511d3.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f6299bb555784e8e88b08d3cfa88be77.png" alt="在这里插入图片描述"><br>改造一下Employee实体类，通用id雪花自增算法来新增id<br><img src="https://img-blog.csdnimg.cn/d38ab9e9810244bab56a09ca6d40bfa9.png" alt="在这里插入图片描述"><br>这里用service接口继承的MybatisPlus的功能<br><img src="https://img-blog.csdnimg.cn/0b5eeb36e8214deb8ceea0385d4f89a0.png" alt="在这里插入图片描述"><br>注入一下就可以使用了，插入方法<br><img src="https://img-blog.csdnimg.cn/e297f0e3af7649eda9ac74fb9b19b19c.png" alt="在这里插入图片描述"><br>基本上都是自动CRUD，访问路径：<code>com.cc.controller.EmployeeController</code></p><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><p>先看看这种代码的try catch<br>这种try catch来捕获异常固然好，<strong>但是，代码量一大起来，超级多的try catch就会很乱</strong><br><img src="https://img-blog.csdnimg.cn/232dfeaca28f420cb0fd5fae01f4ce15.png" alt="在这里插入图片描述"><br>所以我们要加入全局异常处理，在Common包下，和Result同级，这里只是示例，并不完整<br><img src="https://img-blog.csdnimg.cn/b8da6a3931714deeb724381c0ad2da41.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/33fe7337e5464cf9b07a7f0a31f67a04.png" alt="在这里插入图片描述"><br>当报错信息出现Duplicate entry时，就意味着新增员工异常了<br>所以，我们对异常类的方法进行一些小改动，让这个异常反馈变得更人性化<br><img src="https://img-blog.csdnimg.cn/b795bb06e106477192795c9fa56e15fa.png" alt="在这里插入图片描述"><br>这个时候再来客户端试试，就会提供人性化的报错，非常的快乐~<br><img src="https://img-blog.csdnimg.cn/39454913ca2a48778c8c25281a03ff06.png" alt="在这里插入图片描述"><br><strong>这回再回到Controller，这时就不需要再来try catch这种形式了，不用管他，因为一旦出现错误就会被我们的AOP捕获。所以，不需要再用try catch来抓了</strong><br><img src="https://img-blog.csdnimg.cn/0e1e9a3feb7c4b7c8bfa1dc61286437f.png" alt="在这里插入图片描述"><br>异常类位置：<code>com.cc.common.GloableExceptionHandler</code></p><h2 id="员工信息分页查询"><a href="#员工信息分页查询" class="headerlink" title="员工信息分页查询"></a>员工信息分页查询</h2><h3 id="接口分析"><a href="#接口分析" class="headerlink" title="接口分析"></a>接口分析</h3><p>老生常谈分页查询了<br>需求<br><img src="https://img-blog.csdnimg.cn/3899bbef468e4224b6b26fa6a13e103c.png" alt="在这里插入图片描述"><br>分页请求接口<br><img src="https://img-blog.csdnimg.cn/288dd9777c1944d195cb421038fbc885.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3b9f9ddf4a304f44923ef89fa9b22ca7.png" alt="在这里插入图片描述"><br>查询员工及显示接口<br><img src="https://img-blog.csdnimg.cn/cc0e4ee9f4b14b8d9e2c12428471889d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e339d98a293a43c19d3c6a6252da428b.png" alt="在这里插入图片描述"><br>逻辑流程<br><img src="https://img-blog.csdnimg.cn/50fa6620581044c69049028b6921f72e.png" alt="在这里插入图片描述"></p><h3 id="分页插件配置类"><a href="#分页插件配置类" class="headerlink" title="分页插件配置类"></a>分页插件配置类</h3><p>先弄个MP分页插件配置类<br><strong>原因是和3.2.3版本的代码生成器冲突</strong><br><a href="https://blog.csdn.net/weixin_49530535/article/details/119815650">分页插件爆红解决方案</a><br><img src="https://img-blog.csdnimg.cn/d21457c19dd14f89ab7c314137ae7b33.png" alt="在这里插入图片描述"><br>直接注释掉<br><img src="https://img-blog.csdnimg.cn/0d56b79072e548799e4bde12f7cc7bc2.png" alt="在这里插入图片描述"><br>加入配置类<br><img src="https://img-blog.csdnimg.cn/928faf96126040248a6c7629433b8f4a.png" alt="在这里插入图片描述"></p><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>前端注意事项<br><img src="https://img-blog.csdnimg.cn/0e4186ba7e804ab6b1b3c6b2a3f1ce05.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/eae2123e010e4d048e3b5a1339cf41ce.png" alt="在这里插入图片描述"><br>page对象内部<br><img src="https://img-blog.csdnimg.cn/87eab00f37584a51bcee03f83d665e32.png" alt="在这里插入图片描述"><br>里面包含了查询构造器的使用<br>具体的细节在这个包下：com.cc.controller.EmployeeController.page</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页展示员工列表接口、查询某个员工</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page 查询第几页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 每页一共几条数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name 查询名字=name的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回Page页</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">    <span class="comment">//分页构造器,Page(第几页, 查几条)</span></span><br><span class="line">    <span class="type">Page</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(page, pageSize);</span><br><span class="line">    <span class="comment">//查询构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">    <span class="comment">//过滤条件.like(什么条件下启用模糊查询，模糊查询字段，被模糊插叙的名称)</span></span><br><span class="line">    lambdaQueryWrapper.like(!StringUtils.isEmpty(name), Employee::getName, name);</span><br><span class="line">    <span class="comment">//添加排序</span></span><br><span class="line">    lambdaQueryWrapper.orderByDesc(Employee::getCreateTime);</span><br><span class="line">    <span class="comment">//查询分页、自动更新</span></span><br><span class="line">    employeeService.page(pageInfo, lambdaQueryWrapper);</span><br><span class="line">    <span class="comment">//返回查询结果 </span></span><br><span class="line">    <span class="keyword">return</span> Result.success(pageInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="启用、禁用员工账号"><a href="#启用、禁用员工账号" class="headerlink" title="启用、禁用员工账号"></a>启用、禁用员工账号</h2><p>无非就是修改status，0禁用，1启用<br><img src="https://img-blog.csdnimg.cn/cbc14ff5649f4c3ab58a61f6a3717d55.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/00fd8c22798a4be0935fbe4706aac1a0.png" alt="在这里插入图片描述"><br>这种根据登陆人物来进行判断的玩法，是前端<br>这个页面的位置 <code>resource/backend/page/member/list.html</code><br><img src="https://img-blog.csdnimg.cn/15cb1554d5014d91a50a1d33faff5f0e.png" alt="在这里插入图片描述"><br>看拿出来的对象是什么样子的，如果是admin，vue的v-if指令就会把编辑按钮显示出来<br>如果是普通用户，就会把编辑按钮隐藏<br><img src="https://img-blog.csdnimg.cn/1a813cac7216496c9f007b2e89e94571.png" alt="在这里插入图片描述"></p><h3 id="修复一个小Bug"><a href="#修复一个小Bug" class="headerlink" title="修复一个小Bug"></a>修复一个小Bug</h3><p>前端一直不显示编辑按钮，在localStorage里没有发现admin对象<br><img src="https://img-blog.csdnimg.cn/656ddea591c644369951b448d9437162.png" alt="在这里插入图片描述"><br>这个值不应该是登陆成功，应该是Employee的对象Json<br>猜测是登陆的时候往request里存对象没存好<br><img src="https://img-blog.csdnimg.cn/e02134f0443f4cebaf01da0bebb88be3.png" alt="在这里插入图片描述"><br>改成对象存入就好了<br><img src="https://img-blog.csdnimg.cn/3695c863613643ebb7c9d2fb6f44b1f2.png" alt="在这里插入图片描述"><br>这回都正常了<br><img src="https://img-blog.csdnimg.cn/f291200889854951bae0025d0c96d67f.png" alt="在这里插入图片描述"></p><h3 id="功能编写"><a href="#功能编写" class="headerlink" title="功能编写"></a>功能编写</h3><p>复习一下<br>&#x3D;&#x3D;<strong>PutMapping是Resultful风格的请求方式</strong>&#x3D;&#x3D;<br><img src="https://img-blog.csdnimg.cn/0dcd79a42b334bae8337cb40a73fd17c.png" alt="在这里插入图片描述"><br>当前状态是1，直接带着目标状态值（状态改禁用）进行更新<br><img src="https://img-blog.csdnimg.cn/bbc8b8c97744496491c18389cf13f2f1.png" alt="在这里插入图片描述"><br>Id精度丢失，js独有的bug，直接处理Long处理不了，要Long转String再返回去<br><img src="https://img-blog.csdnimg.cn/bd851e41062148db9a7d4b84b687372f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/65954dc589544fe1bc98a70d0a878936.png" alt="在这里插入图片描述"><br>利用对象转换器JacksonObjectMapper，将对象转Json<br>将Long型的Id转换为String类型的数据<br><img src="https://img-blog.csdnimg.cn/7b18d09c0e75446db59dab3f6f4f505a.png" alt="在这里插入图片描述"></p><p>在MVC配置类中扩展一个消息转换器<br><img src="https://img-blog.csdnimg.cn/bc895faafbb247eb9e580f553d32d4e6.png" alt="在这里插入图片描述"><br>测试功能正常，正常更新员工状态<br>消息扩展器配置位置：<code>com.cc.common.JacksonObjectMapper</code><br>对象映射器位置：<code>com.cc.config.WebMvcConfig</code><br>员工状态更新位置：<code>com.cc.controller.EmployeeController</code></p><h2 id="编辑员工信息"><a href="#编辑员工信息" class="headerlink" title="编辑员工信息"></a>编辑员工信息</h2><p><img src="https://img-blog.csdnimg.cn/83b635aff2ca4445840f24ef5c60a22b.png" alt="在这里插入图片描述"><br>请求API，这个是先发请求，查到用户，然后填充到页面上<br>可以看出来，这种请求方式是ResultFul风格的请求方式<br>在控制器中要用@PathVariable(“&#x2F;{参数名称}”)注解来进行接收<br><img src="https://img-blog.csdnimg.cn/7f1a236c859d418eb4aa1177cbf82543.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f7b34494b2eb42b8b315e9f7c2802956.png" alt="在这里插入图片描述"><br>完美更新<br>更新方法位置：<code>com.cc.controller.EmployeeController.getEmployee</code></p><h2 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h2><p>像是一部分公共字段，反复填充起来没有意义，简化填充的操作。<br>把这个功能拿出来，单独拎出来做自动填充处理<br><img src="https://img-blog.csdnimg.cn/f6b5a68d4b8646aab2b39db34fba625a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/09eaaee0510849749512ef973529a4ed.png" alt="在这里插入图片描述"><br>为实体类属性上面加入注解 <code>@TableField(fill = 填充条件)</code><br>看一下源码。fill是填充条件，用枚举来进行处理的<br><img src="https://img-blog.csdnimg.cn/c41f5a745d6c48d5b944fbe2b81e5726.png" alt="在这里插入图片描述"><br>加完注解和条件不算完，还要加入配置类进行处理，对填充的数据做规定<br>在common包下创建一个自定义类，最关键的是要实现 <code>MetaObjectHandler接口下的insertFill和updateFill</code><br>确认填充时需要的字段。还有要加入@Component注解，将这个类交给框架来管理，否则的话容易找不到,setValue的值会根据注解加入的字段名称来锁定是否需要更新<br>位置：<code>com.cc.common.MyMetaObjectHandler</code><br><img src="https://img-blog.csdnimg.cn/1810345a8b204a639754df2220f32bc2.png" alt="在这里插入图片描述"><br>但是这里有个问题，如果我想去更新管理员字段是非常困难的，因为我这里拿不到Request的作用域对象，所以要想个办法来处理。<br>这个时候就需要 <code>ThreadLocal</code>来进行对象的获取，这个线程是贯穿整个运行的，可以通过他来获取</p><h3 id="使用时·"><a href="#使用时·" class="headerlink" title="使用时·"></a>使用时·</h3><p>何为ThreadLocal<br>&#x3D;&#x3D;<strong>重点来了</strong>&#x3D;&#x3D;<br>这个图<br><img src="https://img-blog.csdnimg.cn/a747301972964b88a7db5dc9d84995e6.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/62ec83c598a546b89722fef26f3ca4b4.png" alt="在这里插入图片描述"><br>我的思路就是在用户登陆的时候，把这个id存进去，等到在填充字段的时候，从ThreadLocal里把这个资源再拿出来。<br>直接操作不太好，把他封装成一个工具类，这个工具类里方法都是静态的，可以通过类直接调用、并且都是静态方法，来操作保存和读取<br>我选择在Utils下创建</p><h3 id="第一次的Bug"><a href="#第一次的Bug" class="headerlink" title="第一次的Bug"></a>第一次的Bug</h3><p>具体包在utils里，有Bug，封装的类ThreadLocal获取不到数据，不太清楚为什么，暂时就把这个写死了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于ThreadLocal 封装工具类，用户保存和获取当前登录的用户id</span></span><br><span class="line"><span class="comment">// ThreadLocal以线程为 作用域，保存每个线程中的数据副本</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  设置当前用户id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，ThreadLocal不是一个线程，只有同一个线程才能拿到，不是一个线程拿不到的</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>更改setId的位置，存储的时候放在过滤器内部，就算是一个线程了，就能拿到。不过我都试过了，确实是一个线程，但是还是拿不到。<br>换个思路：因为我想拿Request对象里的Id嘛，所以，只要有Request的id就行，不必过于执着一定要用ThreadLocal来存，因此，我这里选择注入一下HttpServletRequest对象来解决这个问题。<br><img src="https://img-blog.csdnimg.cn/58b8b8d5442a4da29ef667430a521262.png" alt="在这里插入图片描述"></p><h1 id="菜品页面"><a href="#菜品页面" class="headerlink" title="菜品页面"></a>菜品页面</h1><h2 id="菜品分类"><a href="#菜品分类" class="headerlink" title="菜品分类"></a>菜品分类</h2><p><img src="https://img-blog.csdnimg.cn/2c38b870546f49bd9a9d00572c2f1578.png" alt="在这里插入图片描述"></p><p>涉及的表有分类表category<br><img src="https://img-blog.csdnimg.cn/5c9af552c151402d99d419b44601110a.png" alt="在这里插入图片描述"><br>业务流程<br><img src="https://img-blog.csdnimg.cn/0e55226139a848f4ba8a792c62a6feb3.png" alt="在这里插入图片描述"></p><h3 id="新增菜品分类"><a href="#新增菜品分类" class="headerlink" title="新增菜品分类"></a>新增菜品分类</h3><p>请求方式是Post请求<br><img src="https://img-blog.csdnimg.cn/d43ee4cb2aeb4259abe4129cb1672978.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/dc4cdb56b1ff40039d61b044f0259ea4.png" alt="在这里插入图片描述"><br>控制器位置：<code>com.cc.controller.CategoryController (save)</code></p><h3 id="菜品分类展现"><a href="#菜品分类展现" class="headerlink" title="菜品分类展现"></a>菜品分类展现</h3><p><img src="https://img-blog.csdnimg.cn/9dc65e03155d4e29b1dd85b73e79468c.png" alt="在这里插入图片描述"><br>还是那几步</p><ol><li>创建分页构造器 Page pageInfo &#x3D; new Page(第几页,每页几条数据);</li><li>如果有需要条件过滤的加入条件过滤器LambaQueryWarpper</li><li>注入的service对象（已经继承MP的BaseMapper接口）去调用Page对象<br>service对象.page(分页信息,条件过滤器)</li><li>返回结果就可以了</li></ol><p>分页查询位置：<code>com.cc.controller.CategoryController.page</code></p><h3 id="删除菜品分类"><a href="#删除菜品分类" class="headerlink" title="删除菜品分类"></a>删除菜品分类</h3><p><img src="https://img-blog.csdnimg.cn/d3c5ede5188a46caa8bef24e4c14b9fb.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e35caef5f5d8421aae24cfc2832fe3d0.png" alt="在这里插入图片描述"><br>普通版本，没有考虑分类有关联的情况<br><img src="https://img-blog.csdnimg.cn/62d820a820634bcc841b41bcc0bc3987.png" alt="在这里插入图片描述"><br>完善一下，&#x3D;&#x3D;<strong>如果当前菜品分类下有菜品的话，就不许删除</strong>&#x3D;&#x3D;<br>所以在删除之前要先做判断才可以删除，不符合条件的，我们要抛出异常进行提示<br>因为没有返回异常信息的类，我们这里要做一个自定义的专门返回异常信息的类 <code>CustomerException</code><br>这个类的位置也在common包下<br><img src="https://img-blog.csdnimg.cn/40de841c594443398553b1509512fa5e.png" alt="在这里插入图片描述"><br>因为我们之前创建了一个全局异常处理，也要用上，因为要拦截异常统一处理<br>还是 <code>com.cc.common.GloableExceptionHandler</code><br>对抛出异常进行处理，就可以对新增的异常提供目标的拦截和异常通知<br><img src="https://img-blog.csdnimg.cn/035d8b14a54f4cb1bffcd4c63673d0f8.png" alt="在这里插入图片描述"><br>删除菜品分类的controller接口在：<code>com.cc.controller.CategoryController (delCategory)</code><br>因为业务特殊，且比较长，就分离出来把业务放在service包下<br>service接口位置：<code>com.cc.service.impl.CategoryServiceImpl (removeCategory)</code></p><h2 id="修改套餐信息"><a href="#修改套餐信息" class="headerlink" title="修改套餐信息"></a>修改套餐信息</h2><p><img src="https://img-blog.csdnimg.cn/e6c29b9b209c4881815bdffa24f571e8.png" alt="在这里插入图片描述"><br>非常简单的CRUD，直接调用MP更新一下就行<br>API位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.cc.controller.CategoryController (updateCategory)</span><br></pre></td></tr></table></figure><h2 id="文件上传下载（重点）"><a href="#文件上传下载（重点）" class="headerlink" title="文件上传下载（重点）"></a>文件上传下载（重点）</h2><h3 id="上传逻辑"><a href="#上传逻辑" class="headerlink" title="上传逻辑"></a>上传逻辑</h3><p>第一次接触上传和下载的功能<br>文件上传逻辑（后端）<br><img src="https://img-blog.csdnimg.cn/6fddfbb6992645358dd6f7fc9e7ed79d.png" alt="在这里插入图片描述"><br>参数名有要求的<br>接收的文件类型一定是 方法名(MultipartFile 前端上传的文件名称)<br><img src="https://img-blog.csdnimg.cn/dee0540b7de5467ea6695e058a833b7f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b0f446d645654cd89577b9ba0a369f34.png" alt="在这里插入图片描述"><br>所以后端的接收名字也得改为file<br><img src="https://img-blog.csdnimg.cn/8d04a387872f43f199fadcd1d2c79090.png" alt="在这里插入图片描述"></p><h3 id="上传逻辑实现"><a href="#上传逻辑实现" class="headerlink" title="上传逻辑实现"></a>上传逻辑实现</h3><p>具体的存储路径写在配置文件里了<br><img src="https://img-blog.csdnimg.cn/57186bd868ce4e8fadf0090dd495c9ce.png" alt="在这里插入图片描述"><br>用@Value注入到业务里就可以了<br><img src="https://img-blog.csdnimg.cn/8e10ef4ade02405d86215df5653076f7.png" alt="在这里插入图片描述"></p><p>具体位置在 <code>com.cc.controller.CommonController (upLoadFile)</code></p><h3 id="下载逻辑"><a href="#下载逻辑" class="headerlink" title="下载逻辑"></a>下载逻辑</h3><p><img src="https://img-blog.csdnimg.cn/9748d9f84a224b329f2035afcf31091d.png" alt="在这里插入图片描述"><br>&#x3D;&#x3D;图片回显功能&#x3D;&#x3D;<br>用到了输入输出流<br>位置：<code>com.cc.controller.CommonController (fileDownload)</code></p><h1 id="菜品管理页面"><a href="#菜品管理页面" class="headerlink" title="菜品管理页面"></a>菜品管理页面</h1><h2 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="https://img-blog.csdnimg.cn/307c50613cf9427eb8af9ca1edf35f10.png" alt="在这里插入图片描述"><br>涉及表为dish和dish_flavor<br><img src="https://img-blog.csdnimg.cn/2bee4656682c429093d0b487f7453028.png" alt="在这里插入图片描述"><br>开发逻辑<br><img src="https://img-blog.csdnimg.cn/0c69f61ce4e84e87b2f70cef256a597c.png" alt="在这里插入图片描述"></p><h3 id="新增实现"><a href="#新增实现" class="headerlink" title="新增实现"></a>新增实现</h3><p>由于是多表的操作，MP直接干肯定不行，所以就把service层抽离出来进行处理</p><p>还有，因为涉及两张表，这里还要加入事务进行控制，防止多表操作崩溃</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">多表操作只能一个一个来，MP没有办法一次性操作多张表</span><br><span class="line">因为涉及到多表的问题，所以还要加入注解来处理事务</span><br><span class="line"><span class="meta">@Transactional</span> 开启事务</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> 在启动类加入，支持事务开启</span><br></pre></td></tr></table></figure><p>Controller位置：<code>com.cc.controller.DishController (addDish)</code><br>Service位置：<code>com.cc.service.DishService </code><br>ServiceImpl位置：<code>com.cc.service.impl.DishServiceImpl (addDishWithFlavor)</code></p><h3 id="新增菜品之获取菜品种类"><a href="#新增菜品之获取菜品种类" class="headerlink" title="新增菜品之获取菜品种类"></a>新增菜品之获取菜品种类</h3><p><img src="https://img-blog.csdnimg.cn/260620e272564731a10cf74b24d47b95.png" alt="在这里插入图片描述"><br>从前端接收一个type&#x3D;1的标注，目的是在分类表中，菜品分类是1，套餐分类是2，把二者区分开，获取所有的菜品类型<br><img src="https://img-blog.csdnimg.cn/c139415e958e4a4d81a9687d3f04a524.png" alt="在这里插入图片描述"><br>位置：<code>com.cc.controller.CategoryController （listCategory）</code></p><h3 id="菜品分页"><a href="#菜品分页" class="headerlink" title="菜品分页"></a>菜品分页</h3><p>顺手把菜品分页也做了，不写太多了，位置在：<code>com.cc.controller.CategoryController （dishPage）</code><br>记录一个知识点，如果说后端没有类和前端要的数据对应，那么自己就可以封装一个类来对前端特殊需要的数据进行封装</p><h2 id="DTO对象"><a href="#DTO对象" class="headerlink" title="DTO对象"></a>DTO对象</h2><p>这个类可以是对一些实体类进行扩展，继承于某个父类，再添加一些内容<br>比如Dish和DishDto<br>DishDto就继承于Dish类，并在此基础上进行了扩展<br><img src="https://img-blog.csdnimg.cn/c20e2473b88b49f684764ddab99f9cfb.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a365d359125f498799f4b96a8e43fd0a.png" alt="在这里插入图片描述"></p><h2 id="更新菜品信息"><a href="#更新菜品信息" class="headerlink" title="更新菜品信息"></a>更新菜品信息</h2><p>就是个update<br><img src="https://img-blog.csdnimg.cn/e48ab4407978498d8321be25c5da40a0.png" alt="在这里插入图片描述"><br>逻辑<br><img src="https://img-blog.csdnimg.cn/31c8e202fea94bcf8a775644996a6cc5.png" alt="在这里插入图片描述"><br>注意，这里回显数据是要用DishDto，因为前端要显示口味等信息，这里如果用Dish是无法完美显示的，所以要用DishDto</p><h3 id="回显填充查询"><a href="#回显填充查询" class="headerlink" title="回显填充查询"></a>回显填充查询</h3><p><img src="https://img-blog.csdnimg.cn/7fd4eb56b06542b490e056bc8989a12c.png" alt="在这里插入图片描述"></p><p>除此之外，这是个多表联查，用MP肯定不行，得自己写<br>Controller位置：<code>com.cc.controller.DishController (updateDish)</code><br>Service位置：<code>com.cc.service.DishService </code><br>ServiceImpl位置：<code>com.cc.service.impl.DishServiceImpl</code></p><h3 id="更新实现"><a href="#更新实现" class="headerlink" title="更新实现"></a>更新实现</h3><p>实际上就是两个表联动更新和删除操作，所以MP直接操作是不可以的，所以要在Service层自己再封装一个删除方法，给Controller层调用删除就行<br>对于Dish对象可以直接进行更新，因为DishDto是Dish的子类<br>因此可以调用DishService的update方法传入DishDto对象，来实现Dish的更新<br>Controller位置：<code>com.cc.controller.DishController (updateDish)</code> 确实和上面那个一样，因为请求方式不一样<br>Service位置：<code>com.cc.service.DishService </code><br>ServiceImpl位置：<code>com.cc.service.impl.DishServiceImpl (updateDishWithFlavor)</code></p><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><p>完成一些小功能的开发<br><img src="https://img-blog.csdnimg.cn/b4b59c021748427c87fa6edc48619920.png" alt="在这里插入图片描述"></p><h4 id="停售功能"><a href="#停售功能" class="headerlink" title="停售功能"></a>停售功能</h4><p>就是把数据库的status值更新一下，两个路径，一个启售，一个停售<br><img src="https://img-blog.csdnimg.cn/f1da740301ed403399148b6d9afb31f5.png" alt="在这里插入图片描述"><br>停售请求路径<br><img src="https://img-blog.csdnimg.cn/2969987e765b4a8e8b4fd71b772bcfa0.png" alt="在这里插入图片描述"><br>如果状态不一样了，会从停售变成启售，同时对应的请求路径也不一样<br><img src="https://img-blog.csdnimg.cn/335331ee558541e089128ff2b36faa6e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f3b5006617a144c2a50cf48e91daf7db.png" alt="在这里插入图片描述"><br>Controller位置：<code>com.cc.controller.DishController (updateStatusStop)</code>停止<br>Controller位置：<code>com.cc.controller.DishController (updateStatusStart)</code>启动</p><h4 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h4><p><img src="https://img-blog.csdnimg.cn/2e291e2e9a5941dbafb90caed4c894a2.png" alt="在这里插入图片描述"><br>菜品删除功能<br>完成逻辑删除，不是真删<br><img src="https://img-blog.csdnimg.cn/2b84f5bc3cd54e1997a87f5768f0b48a.png" alt="在这里插入图片描述"><br>位置：<br>Controller位置：<code>com.cc.controller.DishController (deleteDish)</code>停止</p><h1 id="套餐页面"><a href="#套餐页面" class="headerlink" title="套餐页面"></a>套餐页面</h1><p>实际上就是一组菜品的集合</p><h2 id="新增套餐概述"><a href="#新增套餐概述" class="headerlink" title="新增套餐概述"></a>新增套餐概述</h2><p>涉及到的数据库<br><img src="https://img-blog.csdnimg.cn/490ee26fc870424092c6f06b3b637de2.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6ab0bc680c2d40d48da71becdf139330.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/458f7e16da474362ad0f5b49656bdc06.png" alt="在这里插入图片描述"><br>导入SetmealDto<br><img src="https://img-blog.csdnimg.cn/9f5bd7dfcecc4c5a95d3ce1a48358980.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/0bb88c91dfba4c759e8cca3eb574682e.png" alt="在这里插入图片描述"></p><h2 id="新增套餐之菜品列表"><a href="#新增套餐之菜品列表" class="headerlink" title="新增套餐之菜品列表"></a>新增套餐之菜品列表</h2><p><img src="https://img-blog.csdnimg.cn/7b242922f194454cbce663c939c19fe8.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fd6a01bbfbee43a1b7ff6b420815ef7f.png" alt="在这里插入图片描述"><br>Controller位置：<code>com.cc.controller.DishController (listCategory)</code></p><h2 id="新增套餐实现"><a href="#新增套餐实现" class="headerlink" title="新增套餐实现"></a>新增套餐实现</h2><p>和新增菜品差不多，这里也是多表的操作<br>Controller位置：<code>com.cc.controller.SetmealController (saveSetmeal)</code><br>Service位置：<code>com.cc.service.SetmealService</code><br>ServiceImpl位置：<code>com.cc.service.impl.SetmealServiceImpl(saveWithDish)</code></p><h2 id="套餐分页"><a href="#套餐分页" class="headerlink" title="套餐分页"></a>套餐分页</h2><p>这里的套餐分页和以往不同，设计到了多表内容<br><img src="https://img-blog.csdnimg.cn/28b34889b2e4467c9e3e4a79aa3d2d18.png" alt="在这里插入图片描述"><br>套餐分页Controller位置：<code>com.cc.controller.SetmealController.pageList</code><br>套餐Mapper接口位置：<code>com.cc.mapper.SetmealMapper</code><br>Mapper文件位置：<code>resource.mapper.SetmealMapper</code><br><img src="https://img-blog.csdnimg.cn/a02a17ef6b8648a59e2b90ef9ec70a3f.png" alt="在这里插入图片描述"></p><h2 id="更新套餐"><a href="#更新套餐" class="headerlink" title="更新套餐"></a>更新套餐</h2><p>添加套餐和更新套餐是几乎完全一致的，字段巴拉巴拉的都一样<br><img src="https://img-blog.csdnimg.cn/5bf7c40f7b9147b7a093da18ae860952.png" alt="在这里插入图片描述"><br>但是注意，修改套餐的话，需要先对菜品页面进行填充，这一页都是需要填充满要修改的菜品信息的。<img src="https://img-blog.csdnimg.cn/07c01da9636d4643acea8689f2579f82.png" alt="在这里插入图片描述"><br>先发请求，一看就是Restful风格请求<br><img src="https://img-blog.csdnimg.cn/cb797ab490434dd2ad5de3e282e3f4c4.png" alt="在这里插入图片描述"><br>获取套餐Controller位置：<code>com.cc.controller.SetmealController.getSetmal</code></p><h2 id="更新销售状态"><a href="#更新销售状态" class="headerlink" title="更新销售状态"></a>更新销售状态</h2><p><img src="https://img-blog.csdnimg.cn/53db02cdb6fd4574b2471bdaf7825d78.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f2158ec7d2924b2eb17e2ef7b92fc6f3.png" alt="在这里插入图片描述"><br>和之前一个业务逻辑很像，不想多赘述了，直接放接口位置<br><img src="https://img-blog.csdnimg.cn/bb10511b3fd14b398095865065700680.png" alt="在这里插入图片描述">Controller位置：<code>com.cc.controller.SetmealController (startSale/stopSale)</code></p><h2 id="删除套餐"><a href="#删除套餐" class="headerlink" title="删除套餐"></a>删除套餐</h2><p>可以单独删，也可以批量删，接口是万金油，都能接，主要看传来的数据是几个<br><img src="https://img-blog.csdnimg.cn/734b880bdf304e70bb9376ecebcd3d15.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/730459957d464af3827df49084205353.png" alt="在这里插入图片描述"><br>接口<br><img src="https://img-blog.csdnimg.cn/678ea2f5eb194625a05567061bba5ad0.png" alt="在这里插入图片描述"><br>&#x3D;&#x3D; 多表删除，在Controller直接实现不太现实，所以要在Service把业务写好&#x3D;&#x3D;<br>Controller位置：<code>com.cc.controller.SetmealController (deleteSetmeal)</code><br>Service位置：<code>com.cc.service.SetmealService</code><br>ServiceImpl位置：<code>com.cc.service.impl.SetmealServiceImpl(removeWithDish)</code><br><img src="https://img-blog.csdnimg.cn/bb4351bafe314861b6c775620f39641e.png" alt="在这里插入图片描述"></p><h1 id="前台开发（手机端）"><a href="#前台开发（手机端）" class="headerlink" title="前台开发（手机端）"></a>前台开发（手机端）</h1><h1 id="账户登陆"><a href="#账户登陆" class="headerlink" title="账户登陆"></a>账户登陆</h1><h2 id="短信发送"><a href="#短信发送" class="headerlink" title="短信发送"></a>短信发送</h2><p><img src="https://img-blog.csdnimg.cn/6db71e2024264927a59a3ae59bca5890.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/56cadd94e4de4536aec20ff921842039.png" alt="在这里插入图片描述"><br><a href="https://blog.csdn.net/qq_55106682/article/details/121920826">阿里云短信业务教程</a></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><a href="https://help.aliyun.com/document_detail/112148.html">官方文档地址</a><br>导入Maven</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">4.5</span><span class="number">.16</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aliyun-java-sdk-dysmsapi&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ca8d01eaf61a485a9e0edae0c0307c3a.png" alt="在这里插入图片描述"><br>导入短信登陆的工具类，把ACCESSKeyID和Secret更换到位就行<br><img src="https://img-blog.csdnimg.cn/fab29b651545452b8aaf515717a3244d.png" alt="在这里插入图片描述"></p><h2 id="验证码发送"><a href="#验证码发送" class="headerlink" title="验证码发送"></a>验证码发送</h2><p>数据模型user表，手机验证码专用的表<br><img src="https://img-blog.csdnimg.cn/582420e32f9449699765ad9db8f665bc.png" alt="在这里插入图片描述"><br>开发流程<br><img src="https://img-blog.csdnimg.cn/03e0ad86bbda4229b8985e6644e2e5f7.png" alt="在这里插入图片描述"><br>修改拦截器，放行操作<br><img src="https://img-blog.csdnimg.cn/2c136ec0905248328f25be7e137b2da0.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/15b21dad09be44bfa030984f5f4c1731.png" alt="在这里插入图片描述"><br>controller位置：<code>com.cc.controller.UserController （sendMsg）</code><br>发送完还需要验证，验证就是另一个login了</p><h2 id="用户登陆"><a href="#用户登陆" class="headerlink" title="用户登陆"></a>用户登陆</h2><p><img src="https://img-blog.csdnimg.cn/16f3f2b8f68948b0b4f2e01133adc6ce.png" alt="在这里插入图片描述"><br>controller位置：<code>com.cc.controller.UserController （login）</code><br>这里登陆还涉及到过滤器放行的功能，不要忘记了，把用户id存入session，过滤器会进行验证<br>过滤器<br><img src="https://img-blog.csdnimg.cn/16d1b1cf6fa54b408d9b5bcd495962f5.png" alt="在这里插入图片描述"><br>controller<br><img src="https://img-blog.csdnimg.cn/7da50768c0b043f3a9a5f3dbce6915c1.png" alt="在这里插入图片描述"></p><h1 id="前台页面"><a href="#前台页面" class="headerlink" title="前台页面"></a>前台页面</h1><h2 id="导入用户地址簿"><a href="#导入用户地址簿" class="headerlink" title="导入用户地址簿"></a>导入用户地址簿</h2><p><img src="https://img-blog.csdnimg.cn/732d6d4d8bba4911b903055d7a2003cf.png" alt="在这里插入图片描述"><br>地址表<br><img src="https://img-blog.csdnimg.cn/e45d3cd4c91e4619a21a3342d4683508.png" alt="在这里插入图片描述"><br>这里直接导入现成的AddressBookController，没有自己写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.cc.controller.AddressBookController</span><br></pre></td></tr></table></figure><h2 id="菜品展示"><a href="#菜品展示" class="headerlink" title="菜品展示"></a>菜品展示</h2><p>逻辑梳理<br><img src="https://img-blog.csdnimg.cn/db2983fb1a8a46bc85f4836dae41a24c.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c7e3567ea3f94b718e33ba680e573121.png" alt="在这里插入图片描述"><br>修改DishController的list方法，来符合前台请求的要求<br>controller位置：<code>com.cc.controller.DishController （listCategory）</code><br>套餐内菜品Controller：<code>com.cc.controller.SetmealController （list）</code></p><h2 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h2><p>把菜品加入购物车<br><img src="https://img-blog.csdnimg.cn/159ef74addd64f60bfa9d9a44bf22d64.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3b7b1d5d90d949cb94c6c4f77a2f9d96.png" alt="在这里插入图片描述"><br>逻辑梳理<br><img src="https://img-blog.csdnimg.cn/48b1358d65a8418689ada067bc6fbdd2.png" alt="在这里插入图片描述"><br>注意，这里不需要后端去管总价的计算，就是单价*数量的这个操作，不是后端的内容。前端在展示的时候自己就计算了。<br>位置：<code>com.cc.controller.ShoppingCartController （add）</code></p><h2 id="下单"><a href="#下单" class="headerlink" title="下单"></a>下单</h2><p><img src="https://img-blog.csdnimg.cn/37b2f6bb4b2e4d82942e38ceea4bbc78.png" alt="在这里插入图片描述"><br>对应的两个表，一个是orders表，另一个是orders_detail表</p><p>orders表<br><img src="https://img-blog.csdnimg.cn/37f1f4d9aec2474ab3578ad01062abf9.png" alt="在这里插入图片描述"><br>orders_detail表<br><img src="https://img-blog.csdnimg.cn/d07d325b341841e787117d1f12d727e0.png" alt="在这里插入图片描述"><br>交互流程<br><img src="https://img-blog.csdnimg.cn/04bfdd8093cb41f7956332bb1561e12f.png" alt="在这里插入图片描述"><br>业务比较复杂，在Service里写的 <code>com.cc.service.impl.OrdersServiceImpl</code></p><p>至此基础部分完成，开始对项目性能进行优化</p><h1 id="小知识点总结"><a href="#小知识点总结" class="headerlink" title="小知识点总结"></a>小知识点总结</h1><h3 id="RequestBody的使用"><a href="#RequestBody的使用" class="headerlink" title="@RequestBody的使用"></a>@RequestBody的使用</h3><p>只有传来的参数是Json才能用RequestBody接收，如果不是Json的情况（比如那种？key&#x3D;value&amp;key&#x3D;value）是不可以用的，会400错误<br><a href="https://blog.csdn.net/weixin_44062380/article/details/116103642">关于RequestBody何时使用</a></p><h1 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a>缓存优化</h1><p>基于Redis进行缓存优化<br><img src="https://img-blog.csdnimg.cn/017c0aab4eb345d68ba9a5a309e78c7a.png" alt="在这里插入图片描述"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Redis进行配置"><a href="#Redis进行配置" class="headerlink" title="Redis进行配置"></a>Redis进行配置</h3><p>加入Pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入Redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加入Redis配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//默认的Key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml中加入配置<br><img src="https://img-blog.csdnimg.cn/a737f91d8934469ca405f2acf279272d.png" alt="在这里插入图片描述"></p><h2 id="短信验证码、登陆优化"><a href="#短信验证码、登陆优化" class="headerlink" title="短信验证码、登陆优化"></a>短信验证码、登陆优化</h2><p>给验证码加入有效时间的验证，设置好短信验证码的有效时间<br><img src="https://img-blog.csdnimg.cn/dd9f7fcb4dd948b380008dd1d769e535.png" alt="在这里插入图片描述"><br>如果登陆成功，就自动删除缓存中的验证码<br>优化位置：com.cc.controller.UserController sendMsg和login<br>注入RedisTemplete<br><img src="https://img-blog.csdnimg.cn/e881a9dc80a740aab43c8bc30f45a91f.png" alt="在这里插入图片描述"><br>针对验证码进行优化<br><img src="https://img-blog.csdnimg.cn/4139a4aebf384f8e958f0587c7fe4acb.png" alt="在这里插入图片描述"><br>针对登录后进行优化<br>login方法中<br><img src="https://img-blog.csdnimg.cn/ccc12a60c924407bb8c859aa66b61c38.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/24b7a6e20b7840e1a868dea4be2f0787.png" alt="在这里插入图片描述"><br>这里过滤器也要改，因为登陆的id数据由session变成了redis存放，所以要把过滤器的相关部分进行改造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.cc.filter.LoginCheckFilter</span><br></pre></td></tr></table></figure><p>同样要先注入RedisTemplate<br><img src="https://img-blog.csdnimg.cn/bb4030b56bd64c6dbdc5633c67e4bbfb.png" alt="在这里插入图片描述"></p><h2 id="缓存前台菜品数据"><a href="#缓存前台菜品数据" class="headerlink" title="缓存前台菜品数据"></a>缓存前台菜品数据</h2><p><img src="https://img-blog.csdnimg.cn/32925b5c084942ecb5f5f9aa153a6d96.png" alt="在这里插入图片描述"><br>缓存思路，要保证缓存数据库和DBMS内的数据保持同步，避免读到脏数据（没更新的数据）<br><img src="https://img-blog.csdnimg.cn/ed16b6270e734adaaf78058373894604.png" alt="在这里插入图片描述"><br>对DishController进行优化，加入了缓存<br>再次访问可以发现，如果已经缓存过了当前的菜品分类，就不会再查数据库了</p><h3 id="更新菜品同时更新缓存"><a href="#更新菜品同时更新缓存" class="headerlink" title="更新菜品同时更新缓存"></a>更新菜品同时更新缓存</h3><p>保证少出现脏数据，所以加入清理缓存，不及时清理的话，新数据保存上来，列表数据库无法同步更新。就会出现问题。<br>这里清理精确数据。大面积清缓存也是比较费性能的<br>&#x3D;&#x3D;这种就是全清理&#x3D;&#x3D;<br><img src="https://img-blog.csdnimg.cn/60b7f47bf7d24be0bec55a2309e1f227.png" alt="在这里插入图片描述"><br>&#x3D;&#x3D;这种是精确清理&#x3D;&#x3D;<br><img src="https://img-blog.csdnimg.cn/958c3fd2cb824012af93adfd54d4ea24.png" alt="在这里插入图片描述"></p><h2 id="SpringCache"><a href="#SpringCache" class="headerlink" title="SpringCache"></a>SpringCache</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://img-blog.csdnimg.cn/a59b7272acce47e98a6bd7505772e071.png" alt="在这里插入图片描述"></p><h3 id="SpringCache常用注解及功能"><a href="#SpringCache常用注解及功能" class="headerlink" title="SpringCache常用注解及功能"></a>SpringCache常用注解及功能</h3><p><img src="https://img-blog.csdnimg.cn/768c769e2725422f88530feca96d70b8.png" alt="在这里插入图片描述"></p><h3 id="快速起步"><a href="#快速起步" class="headerlink" title="快速起步"></a>快速起步</h3><p>启动类上要加入 <code>@EnableCaching</code>注解，启用缓存框架<br><img src="https://img-blog.csdnimg.cn/d29b058bff0d4269aa35202a9e35143d.png" alt="在这里插入图片描述"></p><h4 id="CachePut注解"><a href="#CachePut注解" class="headerlink" title="@CachePut注解"></a>@CachePut注解</h4><p>缓存方法返回值，缓存一条或者多条数据<br><img src="https://img-blog.csdnimg.cn/0d18d4dcaad54cc7814e3fa1a82ed8c8.png" alt="在这里插入图片描述"></p><h4 id="CacheEvict注解"><a href="#CacheEvict注解" class="headerlink" title="@CacheEvict注解"></a>@CacheEvict注解</h4><p>删除缓存<br><img src="https://img-blog.csdnimg.cn/ae87712409804775b614bebb226e8896.png" alt="在这里插入图片描述"></p><h4 id="Cacheable注解"><a href="#Cacheable注解" class="headerlink" title="@Cacheable注解"></a>@Cacheable注解</h4><p>先看看Spring是否已经缓存了当前数据，如果已经缓存那么直接返回。<br>如果没有缓存就直接缓存到内存里<br><img src="https://img-blog.csdnimg.cn/c2e3aa34ea3442d894543d105ebb9b41.png" alt="在这里插入图片描述"><br>一些特殊情况，condition属性和Unless属性<img src="https://img-blog.csdnimg.cn/ec27f124b8c047e08a8b95af613ed922.png" alt="在这里插入图片描述"></p><p>前面都是用SpringCache自带的缓存容器，性能肯定比不了Redis<br>所以现在开始引入Redis作为SpringCache缓存的产品<br>切换为Redis作为缓存产品</p><h4 id="SpringCache-Redis"><a href="#SpringCache-Redis" class="headerlink" title="SpringCache-Redis"></a>SpringCache-Redis</h4><p><img src="https://img-blog.csdnimg.cn/8dae4993b8494af598d870917e46ba56.png" alt="在这里插入图片描述"><br>导入jar包<br><img src="https://img-blog.csdnimg.cn/afdfe6133e254348a03303db222f1762.png" alt="在这里插入图片描述"><br>注入相对应的缓存产品Manager就可以了，这里以RedisManager为例<br><img src="https://img-blog.csdnimg.cn/69344c2b79044bb7a354d96cb148d495.png" alt="在这里插入图片描述"></p><h2 id="利用SpringCache-Redis来缓存套餐数据"><a href="#利用SpringCache-Redis来缓存套餐数据" class="headerlink" title="利用SpringCache-Redis来缓存套餐数据"></a>利用SpringCache-Redis来缓存套餐数据</h2><p><img src="https://img-blog.csdnimg.cn/ffd8677c072d4697971562d1a96134bc.png" alt="在这里插入图片描述"><br>启动类上要加入 <code>@EnableCaching</code>注解，启用缓存框架<br><img src="https://img-blog.csdnimg.cn/d29b058bff0d4269aa35202a9e35143d.png" alt="在这里插入图片描述"><br>加入注解时的坑<br>这里相当于是从Return中拿到Setmeal中的属性，但是Return时的数据是Result封装的Setmeal数据，显然无法完成序列化，这里也是需要对Result类进行序列化的改造<br><img src="https://img-blog.csdnimg.cn/f1309a8146514e37bb8078ef9b0cc7ca.png" alt="在这里插入图片描述"><br>继承序列化类，使其可以序列化<br><img src="https://img-blog.csdnimg.cn/f25595d9069441d1adf22a469e842c09.png" alt="在这里插入图片描述"><br>&#x3D;&#x3D;&#x3D;此时就完成了缓存的优化，此时如果缓存中有当前value名字的缓存，就自动返回，如果没有就查询一下。当前缓存自动过期的时间在yml里面有详细配置&#x3D;&#x3D;</p><p>保存套餐方法缓存优化<br>一保存套餐，对应的缓存就得删除，因为数据更新了要重新获取<br>还有更新套餐，理由同上<br>删除方法要加<br><img src="https://img-blog.csdnimg.cn/0896df7570f843a19afb69975c4a328f.png" alt="在这里插入图片描述"><br>保存方法也要加<br><img src="https://img-blog.csdnimg.cn/3206a5c50388428ea4809425d083bc72.png" alt="在这里插入图片描述"></p><h1 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h1><h2 id="MySQL读写分离"><a href="#MySQL读写分离" class="headerlink" title="MySQL读写分离"></a>MySQL读写分离</h2><p>将单点数据库改成分布式的数据库服务器<br>主写从读。<br><img src="https://img-blog.csdnimg.cn/95b2e61b3c594adeac1732bcc6d719d6.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/be32928754c8409785c39f857ee78381.png" alt="在这里插入图片描述"></p><h2 id="MySQL主从复制搭建"><a href="#MySQL主从复制搭建" class="headerlink" title="MySQL主从复制搭建"></a>MySQL主从复制搭建</h2><h3 id="主库设置"><a href="#主库设置" class="headerlink" title="主库设置"></a>主库设置</h3><p>主从复制架构图<br><img src="https://img-blog.csdnimg.cn/c72d940c5ff143ea834e53e05fb4db83.png" alt="在这里插入图片描述"><br>以上就可以做到主库数据和从库数据保持同步</p><p>对主库进行配置<br>Linux改法<br><img src="https://img-blog.csdnimg.cn/71faca81d5524f7f81249639ec421334.png" alt="在这里插入图片描述"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log<span class="operator">-</span>bin<span class="operator">=</span>mysql<span class="operator">-</span>bin #启动二进制</span><br><span class="line">server<span class="operator">-</span>id<span class="operator">=</span><span class="number">100</span> #唯一id</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/07f64dd342a54a02bb9db8055535c02d.png" alt="在这里插入图片描述"></p><p>windows改法</p><p>在mysql安装路径下<br><img src="https://img-blog.csdnimg.cn/ddcf86e4bfc344c3874a528909018c4d.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/d85b28a9fe5c4fdebb9bef5d96717860.png" alt="在这里插入图片描述"></p><p>修改好了重启MySQL</p><p><img src="https://img-blog.csdnimg.cn/841a999f27fe4910baf41c7ba6728ad7.png" alt="在这里插入图片描述"><br>windows版本的重启教程在这里<br><a href="https://blog.csdn.net/weixin_31444279/article/details/113223859">重启mysql</a></p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p><img src="https://img-blog.csdnimg.cn/06539e930d864f08831019eed03e50c0.png" alt="在这里插入图片描述"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span><span class="operator">*</span>.<span class="operator">*</span><span class="keyword">to</span><span class="string">&#x27;xiaoming&#x27;</span>@<span class="string">&#x27;%&#x27;</span>identified <span class="keyword">by</span> <span class="string">&#x27;Root@123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这里我把本地的MySQL作为主机，把阿里云作为从机<br>运行一下权限SQL<br><img src="https://img-blog.csdnimg.cn/bbbc91e5cd674f60a0e3765c1e3a477b.png" alt="在这里插入图片描述"></p><p>查看主机状态 <code>show master status;</code><br><img src="https://img-blog.csdnimg.cn/2c46f23083eb4d009cee681610f20467.png" alt="在这里插入图片描述"></p><h3 id="从库设置"><a href="#从库设置" class="headerlink" title="从库设置"></a>从库设置</h3><p>从库这里选择了阿里云<br>还是先修改配置文件，加入端口id<br><img src="https://img-blog.csdnimg.cn/59c47eb35c4748948c96ac6bf1a0eb17.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b8ac44ce50c546b5bfeb507a0ab7ef4f.png" alt="在这里插入图片描述"><br>第二步还是从库重启（Linux中）<br><img src="https://img-blog.csdnimg.cn/5f1f8347417441ccb00d15c08ff5cb5a.png" alt="在这里插入图片描述"><br>第三部，设置连接到主机<br>运行SQL<br><img src="https://img-blog.csdnimg.cn/dda57b14af0845aca9056e4788a34fea.png" alt="在这里插入图片描述"></p><p>运行一下<br>具体的可以去从机用show master status查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;ip&#x27;</span>,master_user<span class="operator">=</span><span class="string">&#x27;xiaoming&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;Root@123456&#x27;</span>,master_log_file<span class="operator">=</span><span class="string">&#x27;mysql-bin.eo0001&#x27;</span>,master_log_pos<span class="operator">=</span>主机的position</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1f88d8237d804843849777aa1c3e0f4e.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/e9080c8d03a24206a4a00b553b1c9ade.png" alt="在这里插入图片描述"><br>&#x3D;&#x3D;这里我是两台服务器，一台docker安装的mysql（从机）<br>另一台是普通安装的mysql做主机，配置过程中遇到了很多问题，参考了下面的链接&#x3D;&#x3D;<br><a href="https://blog.csdn.net/xizhen2791/article/details/123660049">参考教程</a></p><p>一定一定记着上面从机连接命令运行成功后要启动从机也就是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slave <span class="keyword">start</span></span><br></pre></td></tr></table></figure><p>最后运行 <code>start slave</code>就算是执行成功了<br><img src="https://img-blog.csdnimg.cn/cf6e9e14501149a197b7a6cc329cc1d0.png" alt="在这里插入图片描述"><br>查看一下从机状态</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> slave status</span><br></pre></td></tr></table></figure><p>这样就算搭建好了<br><img src="https://img-blog.csdnimg.cn/54747e8178044d8c9f68a7ecf1862bb7.png" alt="在这里插入图片描述"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="https://img-blog.csdnimg.cn/e471059730274a98a3a6b2e71728724f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/dc067197d93b4799a37e5d51f28c5736.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5657bb24170a4fbe8a9139b954934164.png" alt="在这里插入图片描述"><br>到这里就算搭建完成了</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>这里遇到的问题，连不上<br><img src="https://img-blog.csdnimg.cn/cbb888adff9c45be994e4087e528d9dc.png" alt="在这里插入图片描述"><br>想本地当主机，外网当从机好像不太行，我就又弄了台服务器做读写分离</p><p>搞到了从机之后，就开始配置，安装MySQL等等</p><p>有的时候会提示io冲突，这是因为之前的从机没有关闭，关闭一下就可以了<br><code>stop slave</code> 一下 就可以运行了</p><p>一个从机启动命令忘记了，改了一晚上<br>如果不运行从机启动就会变成这样<br><img src="https://img-blog.csdnimg.cn/85ee4381b01c44ccb0777995ba042e46.png" alt="在这里插入图片描述"></p><h2 id="主写从读实战"><a href="#主写从读实战" class="headerlink" title="主写从读实战"></a>主写从读实战</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><img src="https://img-blog.csdnimg.cn/f141bcd96b9840bd8a4e1295055408a1.png" alt="在这里插入图片描述"><br>难么如何去确定来的SQL应该分配到哪个库上，这个就要靠Sharding-jdbc框架来读写分离的分流处理<br><img src="https://img-blog.csdnimg.cn/83f78cd07cd848de9c4b5abd422d4b91.png" alt="在这里插入图片描述"></p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>步骤如下<br><img src="https://img-blog.csdnimg.cn/f72981dfa9204bab9545793d04bc2ed9.png" alt="在这里插入图片描述"><br>导入Maven坐标</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>dependency<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>groupId<span class="operator">&gt;</span>org.apache.shardingsphere<span class="operator">&lt;</span><span class="operator">/</span>groupId<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>artifactId<span class="operator">&gt;</span>sharding<span class="operator">-</span>jdbc<span class="operator">-</span>spring<span class="operator">-</span>boot<span class="operator">-</span>starter<span class="operator">&lt;</span><span class="operator">/</span>artifactId<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>version<span class="operator">&gt;</span><span class="number">4.0</span><span class="number">.0</span><span class="operator">-</span>RC1<span class="operator">&lt;</span><span class="operator">/</span>version<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>dependency<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;配置yml文件&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: ccTakeOut</span><br><span class="line">  shardingsphere:</span><br><span class="line">    datasource:</span><br><span class="line">      names:</span><br><span class="line">        master,slave</span><br><span class="line">      # 主库（增删改操作）</span><br><span class="line">      master:</span><br><span class="line">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">        driver<span class="operator">-</span>class<span class="operator">-</span>name: com.mysql.cj.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql:<span class="operator">/</span><span class="operator">/</span><span class="number">121.89</span><span class="number">.200</span><span class="number">.204</span>:<span class="number">3306</span><span class="operator">/</span>ruiji?characterEncoding<span class="operator">=</span>utf<span class="number">-8</span></span><br><span class="line">        username: root</span><br><span class="line">        password: <span class="number">333</span></span><br><span class="line">      # 从数据源（读操作）</span><br><span class="line">      slave:</span><br><span class="line">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">        driver<span class="operator">-</span>class<span class="operator">-</span>name: com.mysql.cj.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql:<span class="operator">/</span><span class="operator">/</span><span class="number">121.36</span><span class="number">.51</span><span class="number">.170</span>:<span class="number">3306</span><span class="operator">/</span>ruiji?characterEncoding<span class="operator">=</span>utf<span class="number">-8</span></span><br><span class="line">        username: root</span><br><span class="line">        password: <span class="number">333</span></span><br><span class="line">    masterslave:</span><br><span class="line">      # 读写分离配置</span><br><span class="line">      load<span class="operator">-</span>balance<span class="operator">-</span>algorithm<span class="operator">-</span>type: round_robin #轮询（如果有多个从库会轮询着读）</span><br><span class="line">      # 最终的数据源名称</span><br><span class="line">      name: dataSource</span><br><span class="line">      # 主库数据源名称</span><br><span class="line">      master<span class="operator">-</span>data<span class="operator">-</span>source<span class="operator">-</span>name: master</span><br><span class="line">      # 从库数据源名称列表，多个逗号分隔</span><br><span class="line">      slave<span class="operator">-</span>data<span class="operator">-</span>source<span class="operator">-</span>names: slave</span><br><span class="line">    props:</span><br><span class="line">      <span class="keyword">sql</span>:</span><br><span class="line">        <span class="keyword">show</span>: <span class="literal">true</span> #开启<span class="keyword">SQL</span>显示，默认<span class="literal">false</span></span><br><span class="line">  main:</span><br><span class="line">    allow<span class="operator">-</span>bean<span class="operator">-</span>definition<span class="operator">-</span>overriding: <span class="literal">true</span> #允许bean数据源覆盖</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解读一下yml配置<br><img src="https://img-blog.csdnimg.cn/7e5c203773a04fdd9b9a096659db9749.png" alt="在这里插入图片描述"><br><strong>允许Bean定义覆盖很重要</strong></p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>启动项目，可以看到，读写操作分别到达了不同的主机上<br>读写分离测试<br><img src="https://img-blog.csdnimg.cn/f647f0ab726e48f7a4ae0445970980d2.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fd937b8b481946bba8325127319d22f9.png" alt="在这里插入图片描述"></p><h1 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h1><p><a href="https://blog.csdn.net/weixin_46906696/article/details/125569407?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22125569407%22,%22source%22:%22weixin_46906696%22%7D&ctrtid=O48Rx">Nginx笔记</a></p><h1 id="前后端分离开发"><a href="#前后端分离开发" class="headerlink" title="前后端分离开发"></a>前后端分离开发</h1><p><img src="https://img-blog.csdnimg.cn/5ae7a5c5f65049e698b47a060c9b9ac8.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9b200bae5d514949b1fed2860598906a.png" alt="在这里插入图片描述"></p><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p><img src="https://img-blog.csdnimg.cn/9d4d3ca75521432a999246d1ff68cea2.png" alt="在这里插入图片描述"></p><h2 id="YApi"><a href="#YApi" class="headerlink" title="YApi"></a>YApi</h2><p><img src="https://img-blog.csdnimg.cn/b56ddabf9931461dab56dafdd5614088.png" alt="在这里插入图片描述"></p><h2 id="Swagger（常用）"><a href="#Swagger（常用）" class="headerlink" title="Swagger（常用）"></a>Swagger（常用）</h2><p>主要作用就是帮助后端人员生成后端接口文档的<br><img src="https://img-blog.csdnimg.cn/7352d150c2b64d3e9c84f15ce56c7c1d.png" alt="在这里插入图片描述"><br>使用方式<br><img src="https://img-blog.csdnimg.cn/b22b2f0ae0c04a4db76fe8e8fa047615.png" alt="在这里插入图片描述"><br>导入坐标</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--knife4j接口管理--&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>dependency<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>groupId<span class="operator">&gt;</span>com.github.xiaoymin<span class="operator">&lt;</span><span class="operator">/</span>groupId<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>artifactId<span class="operator">&gt;</span>knife4j<span class="operator">-</span>spring<span class="operator">-</span>boot<span class="operator">-</span>starter<span class="operator">&lt;</span><span class="operator">/</span>artifactId<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>version<span class="operator">&gt;</span><span class="number">3.0</span><span class="number">.2</span><span class="operator">&lt;</span><span class="operator">/</span>version<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>dependency<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>导入配置类<br><img src="https://img-blog.csdnimg.cn/8efe0ecd0f32415296336792c002cb93.png" alt="在这里插入图片描述"><br>具体配置位置 <code>com.cc.config.WebMvcConfig</code></p><p>启动服务，访问路径+doc.html<br>进入之后就可以对已有的接口进行管理了<br><img src="https://img-blog.csdnimg.cn/28fa1199bed745909c1ab3566ef46517.png" alt="在这里插入图片描述"></p><h2 id="Swagger常用注解"><a href="#Swagger常用注解" class="headerlink" title="Swagger常用注解"></a>Swagger常用注解</h2><p>直接生成的注解内容并不是很完善<br><img src="https://img-blog.csdnimg.cn/7b2482af3df7429ea060c692c9778524.png" alt="在这里插入图片描述"><br>Swagger常用注解<br><img src="https://img-blog.csdnimg.cn/96378f7383e34de1a6ef9f7785989c2d.png" alt="在这里插入图片描述"><br>以实体类为例<br><img src="https://img-blog.csdnimg.cn/0fbe9d3e59ee47d0b5a9f8d6b21609af.png" alt="在这里插入图片描述"><br>Controller上的注解<br><img src="https://img-blog.csdnimg.cn/920dcfe50e8544f0ab5a42581722b3e3.png" alt="在这里插入图片描述"><br>以上均为示例，最终完善好注解，文档会更好用，更详细。</p><h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前端作为一个工程，同样需要打包，打包完为dist目录<br><img src="https://img-blog.csdnimg.cn/a2cee8e970754767bf5efab50eb3d065.png" alt="在这里插入图片描述"><br>把这个dist目录，扔进Nginx里HTML文件夹就可以了，也就是那个静态资源<br><img src="https://img-blog.csdnimg.cn/e05ae7caf6ce4c82b5dd35e96ba97059.png" alt="在这里插入图片描述"><br>传上来不算完，还要好好配置一下<br>一个是静态资源，另一个是反向代理</p><h3 id="静态资源配置"><a href="#静态资源配置" class="headerlink" title="静态资源配置"></a>静态资源配置</h3><p>先配置静态资源<br><img src="https://img-blog.csdnimg.cn/85400722cc984e53bc62af167a80ba13.png" alt="在这里插入图片描述"></p><h3 id="请求代理配置"><a href="#请求代理配置" class="headerlink" title="请求代理配置"></a>请求代理配置</h3><p>重启Nginx，测试一下，访问。<br>随便一个请求可以看到，带了前缀<br><img src="https://img-blog.csdnimg.cn/77debb51210c4259a4c59d76778d4f9b.png" alt="在这里插入图片描述"><br>后端项目给的端口是9001<br>请求路径为：<a href="http://www.ccsmile.fun:9001/api/employee/login">http://www.ccsmile.fun:9001/api/employee/login</a><br>我们后端是没有这个api的前缀的<br>通过重写url，就可以把<br><code>http://www.ccsmile.fun:9001/api/employee/login</code><br>变成<br><code>http://www.ccsmile.fun:9001/employee/login</code>的请求地址，这样就完成了请求代理转发操作<br><img src="https://img-blog.csdnimg.cn/cebfe85548264cdaafb056fb8a16c5b9.png" alt="在这里插入图片描述"><br>配置文件如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  listen <span class="number">80</span>;</span><br><span class="line">  server_name localhost;</span><br><span class="line">#静态资源配置</span><br><span class="line">  location <span class="operator">/</span>&#123;</span><br><span class="line">    root html<span class="operator">/</span>dist;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">#请求转发代理，重写URL<span class="operator">+</span>转发</span><br><span class="line">  location <span class="operator">^</span><span class="operator">~</span> <span class="operator">/</span>api<span class="operator">/</span>&#123;</span><br><span class="line">          rewrite <span class="operator">^</span><span class="operator">/</span>api<span class="operator">/</span>(.<span class="operator">*</span>)$ <span class="operator">/</span>$<span class="number">1</span> break;</span><br><span class="line">          proxy_pass http:<span class="operator">/</span><span class="operator">/</span>后端服务ip:端口号;</span><br><span class="line">  &#125;</span><br><span class="line">#其他</span><br><span class="line">  error_page <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> <span class="operator">/</span><span class="number">50</span>x.html;</span><br><span class="line">  location <span class="operator">=</span> <span class="operator">/</span><span class="number">50</span>x.html&#123;</span><br><span class="line">      root html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后保存文件，重启Nginx，就配置完成了<br>不过还是不知道为啥不太好用，还有待解决，实在不行就在后端上加入接收请求前缀就好了</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p><img src="https://img-blog.csdnimg.cn/23e1f1e20f0b420ca3fa8856aa07efaa.png" alt="在这里插入图片描述"><br>上传脚本，自动拉取最新脚本<br>这样在开发端和Linux端就通过Gitee间接实现同步了<br><img src="https://img-blog.csdnimg.cn/c2cf53f4a6044202b5e5b7136a9bc0ef.png" alt="在这里插入图片描述"><br>脚本内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#<span class="operator">!</span><span class="operator">/</span>bin<span class="operator">/</span>sh</span><br><span class="line">echo <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">echo  自动化部署脚本启动</span><br><span class="line">echo <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"></span><br><span class="line">echo 停止原来运行中的工程</span><br><span class="line">APP_NAME<span class="operator">=</span>reggie_take_out</span><br><span class="line"></span><br><span class="line">tpid<span class="operator">=</span>`ps <span class="operator">-</span>ef<span class="operator">|</span>grep $APP_NAME<span class="operator">|</span>grep <span class="operator">-</span>v grep<span class="operator">|</span>grep <span class="operator">-</span>v kill<span class="operator">|</span>awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">if [ $&#123;tpid&#125; ]; <span class="keyword">then</span></span><br><span class="line">    echo <span class="string">&#x27;Stop Process...&#x27;</span></span><br><span class="line">    kill <span class="number">-15</span> $tpid</span><br><span class="line">fi</span><br><span class="line">sleep <span class="number">2</span></span><br><span class="line">tpid<span class="operator">=</span>`ps <span class="operator">-</span>ef<span class="operator">|</span>grep $APP_NAME<span class="operator">|</span>grep <span class="operator">-</span>v grep<span class="operator">|</span>grep <span class="operator">-</span>v kill<span class="operator">|</span>awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">if [ $&#123;tpid&#125; ]; <span class="keyword">then</span></span><br><span class="line">    echo <span class="string">&#x27;Kill Process!&#x27;</span></span><br><span class="line">    kill <span class="number">-9</span> $tpid</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    echo <span class="string">&#x27;Stop Success!&#x27;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo 准备从Git仓库拉取最新代码</span><br><span class="line">cd <span class="operator">/</span>usr<span class="operator">/</span><span class="keyword">local</span><span class="operator">/</span>javaapp<span class="operator">/</span>reggie_take_out</span><br><span class="line"></span><br><span class="line">echo 开始从Git仓库拉取最新代码</span><br><span class="line">git pull</span><br><span class="line">echo 代码拉取完成</span><br><span class="line"></span><br><span class="line">echo 开始打包</span><br><span class="line">output<span class="operator">=</span>`mvn clean package <span class="operator">-</span>Dmaven.test.skip<span class="operator">=</span><span class="literal">true</span>`</span><br><span class="line"></span><br><span class="line">cd target</span><br><span class="line"></span><br><span class="line">echo 启动项目</span><br><span class="line">nohup java <span class="operator">-</span>jar reggie_take_out<span class="number">-1.0</span><span class="operator">-</span>SNAPSHOT.jar <span class="operator">&amp;</span><span class="operator">&gt;</span> reggie_take_out.log <span class="operator">&amp;</span></span><br><span class="line">echo 项目启动完成</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行脚本就OK了<br><img src="https://img-blog.csdnimg.cn/079d294160f94539b7b3db5d09af969e.png" alt="在这里插入图片描述"></p><p>记得修改yml文件中的部分内容，比如文件路径等等信息~<br>完结撒花</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue的实际应用</title>
      <link href="/2023/04/23/Vue%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/"/>
      <url>/2023/04/23/Vue%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件传输</title>
      <link href="/2023/04/23/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
      <url>/2023/04/23/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>在不使用框架之前，原生的HttpServletRequest来接收上传的数据，文件是以二进制流传递到后端的，需要我们自己转换为File类。<br>而在SpringMVC中提供了MultipartFile工具类之后，简化了文件传输操作。</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Post请求，传入MultiPartFile对象</span></span><br><span class="line"><span class="comment">//MultiPartFile对象封装了上传文件的信息，包括文件名、文件大小、文件类型、文件内容等</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">    <span class="comment">//file是一个临时文件，需要转存到指定位置，否则本次请求完成后临时文件会删除</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取原始文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();<span class="comment">//Ex abc.jpg</span></span><br><span class="line">    <span class="comment">//获取文件后缀，包含.，如.jpg</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用UUID重新生成文件名，防止文件名称重复造成文件覆盖</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + suffix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个目录对象，其中basePath是配置文件中配置的文件上传路径</span></span><br><span class="line">    <span class="comment">//java中认为文件夹是一种特殊的文件，所以File对象既可以表示文件，也可以表示文件夹</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">    <span class="comment">//判断当前目录是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        <span class="comment">//目录不存在，需要创建，</span></span><br><span class="line">        <span class="comment">//mkdirs()方法会创建多级目录，mkdir()方法只会创建一级目录</span></span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用MultiPartFile对象的transferTo方法，将文件写入指定位置</span></span><br><span class="line">        file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><p>这里涉及到MultiPartFile和File两个对象</p><p>MultiPartFile对象封装了上传文件的信息，包括文件名、文件大小、文件类型、文件内容等，用于传输。<br>File对象表示文件或文件夹，可以通过File对象对文件或文件夹进行实际操作。<br>对于下载，使用HttpServletResponse对象，通过输出流将文件写回浏览器。</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//输入流，通过输入流读取文件内容</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + name));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出流，通过输出流将文件写回浏览器</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="comment">//设置响应头，告诉浏览器文件类型</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//将读取到的内容写入输出流中</span></span><br><span class="line">            outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            </span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>其中这段是流中的常见操作<br>对于这段代码，首先要明确，输入流和输出流都是字节流，所以需要一个字节数组来缓存读取的内容。<br>read(byte b[])方法，每次读取b.length个字节，返回值表示实际读取的字节数，当返回-1时，表示文件读取完毕。<br>在这里，每次读取1024个字节，将读取到的内容写入输出流中，<strong>len</strong>表示每次读取的字节数，bytes表示读取的内容，0表示从bytes的第0个位置开始读取。当不足1024个字节时，len的值就会小于1024，这时就不需要将bytes数组中的所有内容写入输出流中，只需要将bytes数组中的前len个字节写入输出流中即可</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">          <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">          <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">              outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">               <span class="comment">//刷新输出流，将缓存中的内容写入到浏览器中，</span></span><br><span class="line">              <span class="comment">//如果不刷新，可能会出现文件下载不完整的情况，因为浏览器会缓存一部分内容，等到缓存满了之后才会将内容写入到浏览器中</span></span><br><span class="line">              <span class="comment">//所以，为了保证文件下载完整，需要在每次写入内容之后刷新一下输出流</span></span><br><span class="line">              outputStream.flush();</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>前端的代码看起来是比后端有意思点的</p><p>下面是ElementUI中的组件，用于文件上传<br>其中，<code>action=&quot;/common/upload&quot;</code> 用于指定上传文件时将数据发送到的URL地址。<br><code>show-file-list=&quot;false</code> 将show-file-list属性设置为false，表示在上传文件后不显示上传的文件列表。<br><code>on-success</code>和<code>on-change</code>分别对应了成功上传文件时要调用的函数和在上传文件时要调用的函数<br><code>ref=&quot;upload</code>用于在组件中添加ref属性，以便在Vue组件实例中引用组件。</p><p>组件中包含两个子元素：<br><code>&lt;img v-if=&quot;imageUrl&quot; :src=&quot;imageUrl&quot; class=&quot;avatar&quot;&gt;</code>如果存在一个名为imageUrl的变量，则在组件中显示一个<code>&lt;img&gt;</code>元素，该元素的src属性设置为imageUrl变量的值。在这种情况下，class&#x3D;”avatar”用于自定义图像的样式。<br><code>&lt;i v-else class=&quot;el-icon-plus avatar-uploader-icon&quot;&gt;&lt;/i&gt;</code>如果不存在名为imageUrl的变量，则在组件中显示<code>&lt;i&gt;</code>元素，该元素包含一个“+”符号，用于指示用户可以上传文件。</p><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;avatar-uploader&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">action</span>=<span class="string">&quot;/common/upload&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:show-file-list</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:on-success</span>=<span class="string">&quot;handleAvatarSuccess&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:on-change</span>=<span class="string">&quot;onChange&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ref</span>=<span class="string">&quot;upload&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-if</span>=<span class="string">&quot;imageUrl&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:src</span>=<span class="string">&quot;imageUrl&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;el-icon-plus avatar-uploader-icon&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><p>下面是调用的函数  </p><ol><li><p>onChange 在el-upload中，当用户点击确定，会调用这个方法，主要是作为文件判断，但是不上传文件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">onChange (file) &#123;</span><br><span class="line">   <span class="keyword">if</span>(file)&#123;</span><br><span class="line">     <span class="keyword">const</span> suffix = file.<span class="property">name</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">     <span class="keyword">const</span> size = file.<span class="property">size</span> / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">2</span></span><br><span class="line">     <span class="keyword">if</span>([<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>].<span class="title function_">indexOf</span>(suffix) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传图片只支持 png、jpeg、jpg 格式！&#x27;</span>)</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">upload</span>.<span class="title function_">clearFiles</span>()</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(!size)&#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传文件大小不能超过 2MB!&#x27;</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> file</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li><li><p>文件的上传是通过调用组件实例的submit方法来实现的。el-upload组件提供了一系列的钩子函数（hooks）来监听上传过程的不同阶段，例如before-upload、on-progress、on-success、on-error等。通过设置这些钩子函数，可以在上传过程中执行相应的操作。(不由我们控制)</p></li><li><p>handleAvatarSuccess用于回显，在成功上传后会调用<code>on-success</code>对应的函数</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">handleAvatarSuccess (response, file, fileList) &#123;</span><br><span class="line">         <span class="comment">// this.imageUrl = response.data</span></span><br><span class="line">         <span class="keyword">if</span>(response.<span class="property">code</span> === <span class="number">0</span> &amp;&amp; response.<span class="property">msg</span> === <span class="string">&#x27;未登录&#x27;</span>)&#123;</span><br><span class="line">           <span class="variable language_">window</span>.<span class="property">top</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/backend/page/login/login.html&#x27;</span></span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">imageUrl</span> = <span class="string">`/common/download?name=<span class="subst">$&#123;response.data&#125;</span>`</span></span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">image</span> = response.<span class="property">data</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure></li></ol><p>在el-upload组件中，当文件上传成功后，**服务器会返回一个响应结果(response)**，通常包含上传成功后的文件名或文件URL等相关信息。在on-success事件处理函数中，可以通过获取服务器响应结果的方式来获取上传成功后的文件名或文件URL。<br>4. 所以，在上传文件后，on-success回调的到了保存的URL，将这个URL拼接得到imageURL，通过v-if，向数据库发送请求得到图片的回显。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>EasyExcel</title>
      <link href="/2023/04/22/EasyExcel/"/>
      <url>/2023/04/22/EasyExcel/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OSS对象存储</title>
      <link href="/2023/04/22/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
      <url>/2023/04/22/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>OSS(Object Storage Service)即对象存储服务</p><p>OSS将数据文件以对象&#x2F;文件（<strong>Object</strong>）的形式上传到存储空间（<strong>Bucket</strong>）中。OSS提供的是一个Key-Value键值对形式的对象存储服务。用户可以根据Object的名称（<strong>Key</strong>）唯一地址获取该Object的内容。OSS只能对文件进行<strong>读写（删）</strong>操作。</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>对象由元信息（Object Meta）、用户数据（Data）和文件名（Key）组成。</p><p>对象由存储空间内部唯一的Key来标识。对象<strong>元信息</strong>是一个键值对，表示了对象的一些属性，比如最后修改时间、大小等信息，同时用户也可以在元信息中存储一些自定义的信息。</p><p>对象的生命周期是从上传成功到被删除为止。在整个生命周期内，对象信息不可变更，<strong>重复上传同名的对象会覆盖之前的对象</strong>。因此，OSS不支持修改文件的部分内容等操作。</p><h2 id="Bucket"><a href="#Bucket" class="headerlink" title="Bucket"></a>Bucket</h2><p>存储空间（Bucket）是您用于存储对象（Object）的容器，同一个存储空间的内部是<strong>扁平</strong>的，没有文件系统的目录等概念，所有对象都直接隶属于其对应的存储空间。但一个用户可以拥有多个Bucket。</p><h2 id="强一致性"><a href="#强一致性" class="headerlink" title="强一致性"></a>强一致性</h2><p>Object操作在OSS上具有<strong>原子性</strong>，操作要么成功要么失败。</p><p>OSS保证用户一旦上传完成之后读到的Object是完整的，OSS不会返回给用户一个部分上传成功的Object。</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>虽然用户可以使用类似test1&#x2F;test.jpg的名字，但是这并不表示用户的Object是保存在test1目录下面的。对于OSS来说，test1&#x2F;test.jpg仅仅只是一个字符串，和a.jpg这种并没有本质的区别。这点和树型文件系统不同。</p><p>对于OSS来说，可以通过一些操作来模拟类似的功能，但是代价非常昂贵。比如重命名目录，希望将test1目录重命名成test2，那么OSS的实际操作是将所有以test1&#x2F;开头的Object都重新复制成以test2&#x2F;开头的Object，这是一个非常消耗资源的操作。</p><p>但另外一方面，OSS能支持<strong>高并发</strong>访问，建议对OSS尽量只做新建文件、删除文件、读取文件这几种操作，优先用来存储海量的非结构化数据，比如图片、视频、文档等。</p><h2 id="调用API"><a href="#调用API" class="headerlink" title="调用API"></a>调用API</h2><ol><li><p>获取AccessKey</p><ul><li>用户登录名称</li><li><strong>AccessKey ID</strong></li><li><strong>AccessKey Secret</strong></li></ul></li><li><p>调用</p><p> 参见 <a href="https://help.aliyun.com/document_detail/31948.html?spm=5176.208357.1107607.18.1187390f0q9J3l">官方文档 JavaSDK</a></p><p> 创建存储空间</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     <span class="comment">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;https://oss-cn-hangzhou.aliyuncs.com&quot;</span>;</span><br><span class="line">    <span class="comment">// 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;yourAccessKeyId&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;yourAccessKeySecret&quot;</span>;</span><br><span class="line">    <span class="comment">// 填写Bucket名称，例如examplebucket。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;examplebucket&quot;</span>;·</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">    <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建存储空间。</span></span><br><span class="line">        ossClient.createBucket(bucketName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//异常处理</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (OSSException oe) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span></span><br><span class="line">                + <span class="string">&quot;but was rejected with an error response for some reason.&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());</span><br><span class="line">        System.out.println(<span class="string">&quot;Error Code:&quot;</span> + oe.getErrorCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;Request ID:&quot;</span> + oe.getRequestId());</span><br><span class="line">        System.out.println(<span class="string">&quot;Host ID:&quot;</span> + oe.getHostId());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClientException ce) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Caught an ClientException, which means the client encountered &quot;</span></span><br><span class="line">                + <span class="string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span></span><br><span class="line">                + <span class="string">&quot;such as not being able to access the network.&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Error Message:&quot;</span> + ce.getMessage());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">            ossClient.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流式文件上传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;https://oss-cn-hangzhou.aliyuncs.com&quot;</span>;</span><br><span class="line"><span class="comment">// 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;yourAccessKeyId&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;yourAccessKeySecret&quot;</span>;</span><br><span class="line"><span class="comment">// 填写Bucket名称，例如examplebucket。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;examplebucket&quot;</span>;</span><br><span class="line"><span class="comment">// 填写Object完整路径，例如exampledir/exampleobject.txt。Object完整路径中不能包含Bucket名称。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> <span class="string">&quot;exampledir/exampleobject.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建OSSClient实例。</span></span><br><span class="line"><span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Hello OSS&quot;</span>;</span><br><span class="line">    ossClient.putObject(bucketName, objectName, <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(content.getBytes()));</span><br><span class="line">&#125; <span class="keyword">catch</span> (OSSException oe) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span></span><br><span class="line">            + <span class="string">&quot;but was rejected with an error response for some reason.&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());</span><br><span class="line">    System.out.println(<span class="string">&quot;Error Code:&quot;</span> + oe.getErrorCode());</span><br><span class="line">    System.out.println(<span class="string">&quot;Request ID:&quot;</span> + oe.getRequestId());</span><br><span class="line">    System.out.println(<span class="string">&quot;Host ID:&quot;</span> + oe.getHostId());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClientException ce) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Caught an ClientException, which means the client encountered &quot;</span></span><br><span class="line">            + <span class="string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span></span><br><span class="line">            + <span class="string">&quot;such as not being able to access the network.&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Error Message:&quot;</span> + ce.getMessage());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几个部分</p><ol><li>确定endpoint(端点)，accessKeyId，accessKeySecret；确定bucket名<br>   这个步驟可以把常量定义在配置文件中，便于重复调用</li><li>通过<code>OSSBuilder.build</code>实例化OSS实例对象</li><li>调用相应方法（各种增删改查）</li><li><code>ossClient.shutdown()</code> 关闭OSS实例</li></ol><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>使用版本 <code>aliyun-sdk-oss.version&gt;3.1.0&lt;/aliyun-sdk-oss.version&gt;</code><br>两个必须<strong>依赖</strong>(适用于jdk8及以下，以上略有改动)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    阿里云oss--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    日期工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>上传</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OssService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadFileAvatar</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">endPoint</span> <span class="operator">=</span> ConstantPropertiesUtils.END_POINT;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> ConstantPropertiesUtils.ACCESS_KEY_ID;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> ConstantPropertiesUtils.ACCESS_KEY_SECRET;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> ConstantPropertiesUtils.BUCKET_NAME;</span><br><span class="line">        <span class="comment">//String url;</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//uuid</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">            <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endPoint, accessKeyId, accessKeySecret);</span><br><span class="line">            <span class="comment">// 上传文件流。</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">            <span class="comment">//调用oss方法实现上传</span></span><br><span class="line">            <span class="comment">//其中第二个参数是上传的路径/文件名</span></span><br><span class="line">            <span class="comment">//可以根据路径按日期分类</span></span><br><span class="line">            <span class="comment">//获取当前日期，使用joda</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">dateTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateTime</span>().toString(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> dateTime+<span class="string">&quot;/&quot;</span>+uuid+file.getOriginalFilename();</span><br><span class="line">            ossClient.putObject(bucketName, fileName, inputStream);</span><br><span class="line">            <span class="comment">// 关闭OSSClient。</span></span><br><span class="line">            ossClient.shutdown();</span><br><span class="line">            <span class="comment">//获取url地址</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;https://&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endPoint + <span class="string">&quot;/&quot;</span> + fileName;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅入VUE</title>
      <link href="/2023/04/22/%E6%B5%85%E5%85%A5Vue/"/>
      <url>/2023/04/22/%E6%B5%85%E5%85%A5Vue/</url>
      
        <content type="html"><![CDATA[<p>对于VUE对象，基本结构如下</p><ol><li>el 挂载点，用于挂载Vue实例</li><li>data 用于存放数据</li><li>methods 用于存放方法</li></ol><p>以上三者最为常用，除此以外还有computed, watch, filters等;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//helloworld</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue.js!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>el 属性又称挂载点，可认为是 element 的简写，创建一个 vue实例 得知道是在哪一块元素上创建 Vue实例 ，对哪一块视图进行操作。</p><p>在这里，我们创建了一个 Vue 实例，并将其在el中挂载到一个元素上。这里的挂载元素是 #app,其中和css中类似,  <strong>#绑定的是id</strong>, <strong>.绑定的是class</strong></p><p>data用于Vue 实例中的数据。在这个例子中，我们定义了一个 data 对象，其中包含一个 message 属性，其值为 ‘Hello Vue.js!’。</p><p>在模板中，我们使用<strong>双大括号语法表示数据绑定</strong>，使用来输出message属性的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>指令-内容渲染指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- vue 能够控制下面的 #app 这个 div --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内容渲染指令--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span>my name is ...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; gender &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1. 引入 vue 的库文件，在 window 全局就有了 Vue 这个构造函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2. 创建 vue 的实例对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用构造函数创造 viewmodel 实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 标识 vm 实例要控制页面上的哪个元素，‘’中填写选择器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// data 对象就是要渲染到页面上的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;lucien&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">info</span>: <span class="string">&#x27;&lt;h4 style=&quot;color: red&quot;&gt; 欢迎使用 vue...&lt;h4&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue基本命令"><a href="#Vue基本命令" class="headerlink" title="Vue基本命令"></a>Vue基本命令</h1><p>绑定，事件处理和渲染</p><h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><p>Vue有两种数据绑定的方式：</p><ul><li>单向绑定(v-bind)：数据只能从data流向页面。</li><li>双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。</li></ul><p>另外</p><ul><li>双向绑定一般都应用在表单类元素上（如input等）</li><li>v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</li></ul><p>简写</p><ol><li>v-bind</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">&quot;someDynamicCondition&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;someDynamicCondition&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>v-on</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 普通写法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">单向数据绑定：&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">双向数据绑定：&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上，即有value值的元素，因为其默认与value绑定 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-model:x=&quot;name&quot;&gt;你好啊&lt;/h2&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;hkk&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>vm即Vue实例，这里的事件或者说行为是类似Click等用户行为触发的事件，事件处理就是Vue调用与该事件相关联的事件处理函数；</p><ol><li>使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；</li><li>事件的回调需要配置在methods对象中，最终会在vm上；</li><li>methods中配置的函数，不要用箭头函数！否则this就不是vm，而是Window；</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm或组件实例对象；</li><li>@click&#x3D;”demo” 和 @click&#x3D;”demo($event)” 效果一致，但后者可以传参(demo是methods中的一个名为 demo 的方法)；</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;MyComponent&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleClick</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;事件对象：&quot;</span>, event);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;事件类型：&quot;</span>, event.<span class="property">type</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;事件触发的元素：&quot;</span>, event.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>exact 修饰符</p><p>.exact 修饰符允许你控制由精确的系统修饰符组合触发的事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 即使 <span class="title class_">Alt</span> 或 <span class="title class_">Shift</span> 被一同按下时也会触发 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line">&lt;!-- 有且只有 <span class="title class_">Ctrl</span> 被按下的时候才触发 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>鼠标按钮修饰符<br>.left<br>.right<br>.middle</p><p>这些修饰符会限制处理函数仅响应特定的鼠标按钮。</p><p>prevent：阻止默认事件（常用）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 修饰符用于指出一个指令应该以特殊方式绑定。</span><br><span class="line">     这里的 .<span class="property">prevent</span> 修饰符告诉 v-on 指令对于触发的事件调用js的 event.<span class="title function_">preventDefault</span>()：</span><br><span class="line">     即阻止表单提交的默认行为 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;save&quot;</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">methods: &#123;     onSubmit() &#123;</span></span><br><span class="line"><span class="language-xml">        if (this.user.username) &#123;             console.log(&#x27;提交表单&#x27;)</span></span><br><span class="line"><span class="language-xml">        &#125; else &#123;</span></span><br><span class="line"><span class="language-xml">            alert(&#x27;请输入用户名&#x27;)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure><p>在默认情况下，表单提交会导致浏览器重新加载页面或者向服务器发送请求，我们可以阻止这种默认行为，在 v-on 指令后面添加 .prevent 修饰符。这告诉 Vue.js 在触发事件时调用 event.preventDefault() 方法来阻止默认行为。<br>在上面，当用户点击“保存”按钮时，onSubmit 方法会被调用。也就是“覆盖”了默认的提交方法。</p><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p><strong>v-if</strong>：条件指令，用于条件性地渲染一块内容。这块内容只会在指令的表达式返回真值时才被渲染。表达式可以是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="string">&quot;el&quot;</span>:<span class="string">&quot;#div0&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//#也就是id，.也就是class，这里和div0绑定</span></span></span><br><span class="line"><span class="language-javascript">data：&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">num</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;num%2==0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:200px;heigth:200px;background-color:chartreuse;&quot;</span>&gt;</span></span><br><span class="line">这里的v-if表示若偶数，则启用该标签，若不成立则该标签无效</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>假设我们正在开发一个电子商务网站，该网站允许用户筛选商品并按价格排序。我们可以使用 v-if 来渲染不同的商品列表，以响应用户的不同筛选条件。</p><p>例如，我们可以在页面上放置多个按钮，每个按钮都对应着一个不同的筛选条件。当用户点击某个按钮时，我们可以使用 v-if 来决定渲染哪个商品列表。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortByPrice&quot;</span>&gt;</span>按价格排序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortByRating&quot;</span>&gt;</span>按评分排序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showAllProducts&quot;</span>&gt;</span>显示全部商品<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;sortBy === &#x27;price&#x27;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>按价格排序的商品列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;product in sortedProductsByPrice&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;product.id&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; product.name &#125;&#125; - &#123;&#123; product.price &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;sortBy === &#x27;rating&#x27;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>按评分排序的商品列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;product in sortedProductsByRating&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;product.id&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; product.name &#125;&#125; - &#123;&#123; product.rating &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;sortBy === &#x27;all&#x27;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>所有商品列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;product in products&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;product.id&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; product.name &#125;&#125; - &#123;&#123; product.price &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">products</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;商品A&#x27;</span>, <span class="attr">price</span>: <span class="number">50</span>, <span class="attr">rating</span>: <span class="number">4.5</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;商品B&#x27;</span>, <span class="attr">price</span>: <span class="number">80</span>, <span class="attr">rating</span>: <span class="number">3.8</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;商品C&#x27;</span>, <span class="attr">price</span>: <span class="number">100</span>, <span class="attr">rating</span>: <span class="number">4.9</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">sortBy</span>: <span class="string">&#x27;all&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sortedProductsByPrice</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">products</span>.<span class="title function_">slice</span>().<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">price</span> - b.<span class="property">price</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sortedProductsByRating</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">products</span>.<span class="title function_">slice</span>().<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.<span class="property">rating</span> - a.<span class="property">rating</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sortByPrice</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">sortBy</span> = <span class="string">&#x27;price&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sortByRating</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">sortBy</span> = <span class="string">&#x27;rating&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showAllProducts</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">sortBy</span> = <span class="string">&#x27;all&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-else</strong>：可以使用 v-else 为 v-if 添加一个“else 区块”。一个 v-else 元素必须跟在一个 v-if 或者 v-else-if 元素后面，否则它将不会被识别。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;awesome = !awesome&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-else-if:</strong><br>v-else-if 提供的是相应于 v-if 的“else if 区块”。它可以连续多次重复使用，和 v-else 类似，一个使用 v-else-if 的元素必须紧跟在一个 v-if 或一个 v-else-if 元素后面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另一个可以用来按条件显示一个元素的指令是 <strong>v-show</strong>。其用法基本一样：v-if类似，但是if的原理是若不成立，则整个div消失，而show只是让div的display属性修改为隐藏none，是通过样式改变的。</p><p>v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好。</p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>v-for：列表循环指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1、简单的列表渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in 10&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果想获取索引，则使用index关键字，注意，圆括号中的index必须放在后面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(n, index) in 5&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125; - &#123;&#123; index &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2. 列表遍历--&gt;</span>&gt;</span><br><span class="line">data: &#123;     userList: [</span><br><span class="line">        &#123; id: 1, username: &#x27;helen&#x27;, age: 18 &#125;,</span><br><span class="line">        &#123; id: 2, username: &#x27;peter&#x27;, age: 28 &#125;,</span><br><span class="line">        &#123; id: 3, username: &#x27;andy&#x27;, age: 38 &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;tr v-for=&quot;item in userList&quot;&gt;&lt;/tr&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in userList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.username&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><p>在 Vue.js 中，template 是 Vue.js 组件的一部分，它可以包含 HTML 元素、Vue.js 指令、Vue.js 表达式、Vue.js 组件等内容。通过在 template 中定义这些内容，我们可以构建出应用程序中的各种视图。</p><p>以下是一个简单的 Vue.js 组件示例，其中包含了一个 template：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; greeting &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">greeting</span>: <span class="string">&#x27;Hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;Welcome to my website!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，我们定义了一个包含两个元素的 template，它们分别用于渲染一个标题和一个段落。通过使用 Vue.js 的双花括号语法，我们可以将 greeting 和 message 数据绑定到 HTML 元素中，从而实现动态渲染。或者说，通过template，我们能在vue文件中编写html。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件可以扩展 HTML 元素，封装可重用的代码。<br>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：<br>使用components定义组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;     <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="comment">// 定义局部组件，这里可以定义多个局部组件</span></span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="comment">//组件的名字</span></span><br><span class="line">        <span class="string">&#x27;Navbar&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment">//组件的内容</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;&lt;ul&gt;&lt;li&gt;首页&lt;/li&gt;&lt;li&gt;学员管理&lt;/li&gt;&lt;/ul&gt;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Navbar</span>&gt;</span><span class="tag">&lt;/<span class="name">Navbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;Navbar&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;ul&gt;&lt;li&gt;首页&lt;/li&gt;&lt;li&gt;学员管理&lt;/li&gt;&lt;li&gt;讲师管理&lt;/li&gt;&lt;/ul&gt;&#x27;</span> &#125;)</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Navbar</span>&gt;</span><span class="tag">&lt;/<span class="name">Navbar</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;components/Navbar.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;         <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>常用于点击菜单内容切换<br>Vue.js 路由允许我们通过不同的 URL 访问不同的内容。</p><p>通过 Vue.js 可以实现多视图的单页Web应用,路由需要载入 vue-router 库</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/student&quot;</span>&gt;</span>会员管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/teacher&quot;</span>&gt;</span>讲师管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vue部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 定义（路由）组件。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以从其他文件 import 进来</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title class_">Welcome</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;欢迎&lt;/div&gt;&#x27;</span> &#125;     </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title class_">Student</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;student list&lt;/div&gt;&#x27;</span> &#125;     </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title class_">Teacher</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;teacher list&lt;/div&gt;&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 定义路由</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 每个路由应该映射一个组件。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> routes = [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/welcome&#x27;</span> &#125;, <span class="comment">//设置默认指向的路径</span></span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/welcome&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Welcome</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/student&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Student</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/teacher&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Teacher</span> &#125;     ]</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置     const router = new VueRouter(&#123;         routes </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// （缩写）相当于 routes: routes     &#125;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 创建和挂载根实例。     // 从而让整个应用都有路由功能</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                         router     &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 现在，应用已经启动了！</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送axios</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;     <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,     <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">memberList</span>: []<span class="comment">//数组</span></span><br><span class="line">    &#125;,     <span class="title function_">created</span>(<span class="params"></span>) &#123;         </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getList</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">getList</span>(<span class="params">id</span>) &#123;             <span class="comment">//vm = this</span></span><br><span class="line">        <span class="comment">//向url发送了一个get请求，返回两个回调 成功/失败</span></span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8081/admin/ucenter/member&#x27;</span>)             </span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;                 </span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">memberList</span> = response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">items</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;                 </span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 显示</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span>         <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in memberList&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.memberId&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span>             </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.nickname&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span>     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先，我们使用 new Vue() 创建一个 Vue.js 实例，并将其绑定到网页中的一个元素（在本例中是 id 为 app 的 div 元素）。在 data 选项中，我们定义了一个空数组 memberList，它将用于存储从服务器获取的数据。</p><p>在 created 钩子函数中，我们调用了 getList 方法，它会向服务器发送一个 GET 请求，并使用 axios 库来处理这个请求。如果请求成功，axios 库会返回一个包含响应数据的对象，并触发 then 回调函数。在这个回调函数中，我们使用 response.data 属性来获取服务器返回的数据，并将它赋值给 memberList 数组。如果请求失败，axios 库会触发 catch 回调函数，在这个函数中我们简单地输出了错误信息。</p><p>在网页中，我们使用 Vue.js 的 v-for 指令来循环遍历 memberList 数组，并将每个元素显示在一个表格行中。使用双花括号语法，我们将 item 对象的 memberId 和 nickname 属性绑定到 HTML 元素中，从而实现动态渲染。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql-1</title>
      <link href="/2023/01/24/mysql-1/"/>
      <url>/2023/01/24/mysql-1/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-一"><a href="#MySQL-一" class="headerlink" title="MySQL 一"></a>MySQL 一</h1><h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><h2 id="规则规范"><a href="#规则规范" class="headerlink" title="规则规范"></a>规则规范</h2><h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><p>建议数据库名，表名，表别名，字段名小写</p><p>而关键字，函数名，绑定变量大写</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>单行注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#xxxxx</span><br><span class="line"><span class="comment">-- xxxxx</span></span><br></pre></td></tr></table></figure><p>多行注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">xxxxxx</span></span><br><span class="line"><span class="comment">xxxx</span></span><br><span class="line"><span class="comment">xxxxx</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>多行注释的嵌套是没有意义的</p><h3 id="命名"><a href="#命名" class="headerlink" title="*命名"></a>*命名</h3><h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><p>sql通用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source 文件的全路径</span><br></pre></td></tr></table></figure><p>方式1在图形化界面下是会报错的，只能在cmd使用</p><p>#注意！#该语句后不接分号；</p><h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><p>图形化界面</p><p>如SQLyog中，工具-&gt;执行sql脚本-&gt;选择对应文件</p><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><h3 id="基本SELECT"><a href="#基本SELECT" class="headerlink" title="*基本SELECT"></a>*基本SELECT</h3><p>如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span><span class="operator">+</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span><span class="operator">+</span><span class="number">1</span> <span class="keyword">from</span> dual；</span><br></pre></td></tr></table></figure><p>其中dual是伪表</p><h3 id="SELECT-FROM"><a href="#SELECT-FROM" class="headerlink" title="SELECT FROM"></a>SELECT FROM</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> xxx <span class="keyword">from</span> yyy;</span><br></pre></td></tr></table></figure><p>其中xxx是所需查找的字段&#x2F;列，可以使用*号表示查找所有列，结果也就是显示完整的表。</p><p>注意！select语句查询的是列！</p><h2 id="列的别名"><a href="#列的别名" class="headerlink" title="列的别名"></a>列的别名</h2><p>列，也就是字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,last_name form employee;</span><br></pre></td></tr></table></figure><p>select后返回的表称为结果集</p><p>共有三种方式起别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id emp_id,</span><br><span class="line">last_name <span class="keyword">as</span> lastname form employee;</span><br></pre></td></tr></table></figure><p>空格和as语句都是给列起别名的操作，也就是说如此，寻找到employee_id,last_name字段后，结果集的列名将会临时显示成空格或as后的别名</p><p>最好要养成as的好习惯</p><p>实际上as是alias(别名)的简称</p><p>此外还可用“”双引号引起别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id “emp_id” <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><p>这种方式一般使用在别名是多个单词时，引号还可以提高代码的可读性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id “emp  id” <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><p>注意！</p><p>别名支持中文(UTF-8标准内)</p><p>在mysql中对于单引号和双引号的区别时不严格的，还是应该尽量遵循规则</p><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><h3 id="基本去重"><a href="#基本去重" class="headerlink" title="基本去重"></a>基本去重</h3><p>select后，重复数据只留一条</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> department_id <span class="keyword">from</span> employees;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> department_id <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><p>对于代码1，查询的结果中有大量重复数据</p><p>对于代码2，在1的基础上使用了distinct关键字，作用是去掉重复的数据，对于重复数据结果集中只显示一份</p><h3 id="联合去重"><a href="#联合去重" class="headerlink" title="联合去重"></a>联合去重</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> department_id, salary <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><p>这条语句中的distinct对后面两个字段都起作用，也就是返回 department_id相同而salary不同和department_id不同的所有结果，但实际使用的较少。</p><h2 id="空值运算"><a href="#空值运算" class="headerlink" title="空值运算"></a>空值运算</h2><p>空值，也就是null</p><p>首先null不等同于0，而是不存在的意思（Java）</p><p>所有null参与的运算，结果都为null</p><p>ex.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id，salary”月工资“，</span><br><span class="line">salary<span class="operator">*</span>（<span class="number">1</span><span class="operator">+</span>pet）<span class="operator">*</span><span class="number">12</span>”年工资“，pet”奖金“</span><br><span class="line"><span class="keyword">from</span> employee；</span><br></pre></td></tr></table></figure><p>有pet字段表示奖金，其中表中存在无奖金也就是null的行（员工），对于上述运算，则其salary的结果为null，这显然不和常理。对于这种情况会使用if等语句解决（见单行函数）</p><h2 id="着重"><a href="#着重" class="headerlink" title="着重"></a>着重</h2><p>着重号”·“（键盘1左侧）</p><p>当在实际使用时，字段名和关键字等冲突时，就可使用着重号声明该字段不是一个关键字而是字段名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">order</span>；</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ·<span class="keyword">order</span>； </span><br></pre></td></tr></table></figure><h2 id="常数字段"><a href="#常数字段" class="headerlink" title="常数字段"></a>常数字段</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ‘我是’，<span class="number">123</span> department_id <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><p>对于这句代码，department_id是存在于表中的，而前面的‘我是’，123这二者是显然不存在的，在返回结果集时，每一行结果前都会加上‘我是’和123这两个字段，这样这二者也被称为常数字段</p><p>注意，这里的‘xx’，单引号引起的是字符串</p><h2 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">describe</span> employees；</span><br></pre></td></tr></table></figure><p>显示表的完整结构（字段名，字段类型，约束等）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> employees；</span><br></pre></td></tr></table></figure><p>desc是describe的简写，和describe的作用完全相同</p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>关键字 where</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees；</span><br></pre></td></tr></table></figure><p>该语句得到的是完整的employees表数据。</p><p>使用where，返回符合某一条件的行，如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> department_id <span class="operator">=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure><p>在全表中查找，返回所有department_id为90的行。</p><p>注意，过滤结构where一定要声明在from后，在where中可以添加丰富的语句</p><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span>加法</span><br><span class="line"><span class="operator">-</span>减法</span><br><span class="line"><span class="operator">*</span>  乘法</span><br><span class="line"><span class="operator">/</span> 或 DIV除法，其中div是取整，<span class="operator">/</span>为小数</span><br><span class="line"><span class="operator">%</span> 或 MOD求余</span><br></pre></td></tr></table></figure><p>在sql中，注意与java区别，+‘加法符号’没有连接的作用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span><span class="operator">+</span>”<span class="number">1</span>“<span class="operator">=</span><span class="number">1001</span>；<span class="operator">/</span><span class="operator">/</span>java</span><br><span class="line">字符串加法使<span class="type">int</span>自动提升为字符串，连接为长字符串</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span><span class="operator">+</span>‘<span class="number">1</span>’<span class="operator">=</span><span class="number">101</span>；<span class="operator">/</span><span class="operator">/</span><span class="keyword">sql</span></span><br><span class="line"><span class="keyword">sql</span>的加号只有运算的作用，并且引号内会转换为<span class="type">int</span>进行运算</span><br><span class="line">也就是隐式转换</span><br></pre></td></tr></table></figure><p>sql里的字母字符，汉字字符等和数字运算时，字符被视作0（数字字符除外）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span><span class="operator">+</span>a <span class="operator">=</span><span class="number">100</span>；</span><br></pre></td></tr></table></figure><p>null参与的运算结果都为null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span><span class="operator">+</span><span class="keyword">null</span><span class="operator">=</span><span class="keyword">null</span>；</span><br></pre></td></tr></table></figure><p>对于浮点类型，和java类似，涉及浮点数据的运算mysql也会自动提升转换，输出浮点数据。</p><p>在使用“&#x2F;”的除法中，结果默认为浮点型（不同于java的截地板），使用DIV得到的结果则必为整型。当除法分母为0时，结果为null（MySQL中）</p><p>在取模运算，也就是取余中，得到的只是余数（类似java），其中取余结果的符号与取余符号的左侧相同。</p><h2 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p><img src="/assets/image-20221023145215-bl8ghhd.png" alt="image">共有三种结果，假（0），真（1），Null，类似c而不是java</p><p>比较运算符经常被用来作为SELECT查询语句的条件来使用</p><h3 id="等号运算"><a href="#等号运算" class="headerlink" title="等号运算"></a>等号运算</h3><p>等号运算符（&#x3D;）判断等号两边的值、字符串或表达式是否相等，遵循以下规则</p><ol><li><p>左右均为字符串，MySQL会按照字符串进行比较，其比较的是每个字符串中字符的ANSI编码是否相等</p></li><li><p>有null则null</p></li><li><p>整数和字符串共同存在则字符串转换为数字，非数字字符串会被转换成数字0，</p></li></ol><p>注意！“&#x3D;”是相等判断，“：&#x3D;”才是赋值运算（也就是java的&#x3D;&#x3D;）</p><p>ex.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> last_name,salary <span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> salary <span class="operator">=</span> <span class="number">6000</span>;</span><br></pre></td></tr></table></figure><p>查询salary为6000的包含last_name和salary字段的结果</p><p>注意！对于null，若尝试使用null&#x3D;null去查询，结果是空，因为null的任何等于运算结果都为null，而结果集只会返回比较结果为1的值，该问题可以用安全等于和符号运算等于解决。</p><h3 id="安全等于"><a href="#安全等于" class="headerlink" title="安全等于"></a>安全等于</h3><p>其实很直观的嘛，带了套就安全了</p><p>安全等于运算符“&lt;&#x3D;&gt;”与等于运算符“&#x3D;”的作用是相似的，区别在于是‘&lt;&#x3D;&gt;’可以用来对NULL进行判断。在两个操作数均为NULL时，其返回值为 1 ，而不为NULL；当一个操作数为NULL时，其返回值为 0 ，而不为NULL。</p><p>简单来说使用安全等于运算符时，两边的操作数的值都为NULL时，返回的结果为 1 而不是NULL。</p><h3 id="不等于"><a href="#不等于" class="headerlink" title="不等于"></a>不等于</h3><p>使用“！&#x3D;”或&lt;&gt;来表示</p><h2 id="符号运算"><a href="#符号运算" class="headerlink" title="符号运算"></a>符号运算</h2><h3 id="简述-1"><a href="#简述-1" class="headerlink" title="简述"></a>简述</h3><p><img src="/assets/image-20221023151925-781tfx1.png" alt="image">​</p><h3 id="is-null系列"><a href="#is-null系列" class="headerlink" title="is null系列"></a>is null系列</h3><p>包括is null，is not null，isnull</p><ol><li>is null和is not null是单目运算，如A is null，则为当A字段（值）为null返回1</li><li>isnull是一个函数，如isnull（A），当A字段（值）为null返回1</li></ol><p>一般来说，对字段的查询多用is null，对数字多用等号和安全等号</p><p>注意！where后可接not或！表示否</p><p>ex.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> xxx <span class="keyword">from</span> yyy</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> （A <span class="operator">&lt;=&gt;</span><span class="keyword">null</span>）；</span><br></pre></td></tr></table></figure><p>其中使用not时括号为了提高可读性而加的，而在使用！时必须加上，这里的A &lt;&#x3D;&gt;null返回值会被not取反</p><h3 id="极值"><a href="#极值" class="headerlink" title="极值"></a>极值</h3><p>Least，求最小值</p><p>语法格式为：LEAST(值 1 ，值 2 ，…，值n)。其中，“值n”表示参数列表中有n个值。在有两个或多个参数的情况下，返回最小值。</p><p>其中，当参数是整数或者浮点数时，LEAST将返回其中最小的值；当参数为字符串时，返回字母表中顺序最靠前的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p><p>ex.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> least(first_name,last_name) </span><br><span class="line"><span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><p>对于这些函数，调用时，指定传入first_name,last_name字段，此时表中拥有这两字段的行将会作为类传入这个函数中，也就是说，上面代码的意思是在整个表中，比较每一行的first_name,last_name，输出其中的较小值。</p><p>Greatest于Least大体相似</p><h3 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h3><p>between，一般和and一起使用</p><p>BETWEEN运算符使用的格式通常为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> D <span class="keyword">FROM</span> <span class="keyword">TABLE</span> <span class="keyword">WHERE</span> C <span class="keyword">BETWEEN</span> A <span class="keyword">AND</span> B;</span><br></pre></td></tr></table></figure><p>此时，当C大于或等于A，并且C小于或等于B时，结果为 1 ，否则结果为 0，也就是说，这是一个闭区间。</p><p>ex.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> <span class="number">2500</span> <span class="keyword">AND</span> <span class="number">3500</span> ;</span><br></pre></td></tr></table></figure><h3 id="In"><a href="#In" class="headerlink" title="In"></a>In</h3><p>包括in和not in，也就是属于和不属于，和between相似，但in更多的是对离散值的查找。</p><p>IN运算符用于判断给定的值是否是IN列表中的一个值，如果是则返回 1 ，否则返回 0 。如果给定的值为NULL，或者IN列表中存在NULL，则结果为NULL。</p><p>ex.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, salary, manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IN</span> ( <span class="number">100</span> , <span class="number">101</span> , <span class="number">201</span> );</span><br></pre></td></tr></table></figure><p>而not in和in类似，如果不是IN列表中的一个值，则返回 1 ，否则返回 0 。</p><h3 id="Like"><a href="#Like" class="headerlink" title="Like"></a>Like</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>也就是模糊查询，通常用于字符串如果满足条件则返回 1 ，否则返回0 。通常如果给定的值或者匹配条件为NULL，则返回结果为NULL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> last_name</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上是精确查询，返回所有last_name &#x3D; ‘a’的行</p><p>而last常与%或_一起使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“<span class="operator">%</span>”：匹配 <span class="number">0</span> 个或多个字符</span><br><span class="line">“_”：只能匹配一个字符</span><br></pre></td></tr></table></figure><p>如apple和abandoned都可以表示为a%，eat可以表示为_a_或%a%</p><p>ex.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;S%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>返回所有first_name为Sxxxxxxxx的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_o%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>返回所有满足xoxxxxxxx的结果</p><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><p>当查询对象本身就是”_”或”%”时，使用转义字符”\&quot;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> ‘IT\_<span class="operator">%</span>‘;</span><br></pre></td></tr></table></figure><p>也可以使用escape指定转义字符，如下代码则是让$成为了转义字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> ‘IT$_<span class="operator">%</span>‘ <span class="keyword">escape</span> ‘$‘;</span><br></pre></td></tr></table></figure><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><h3 id="简述-2"><a href="#简述-2" class="headerlink" title="简述"></a>简述</h3><p><img src="/assets/image-20221023162850-blq1ra9.png" alt="image">​</p><p>注意！逻辑运算两侧表达式应该完整，如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IN</span> <span class="number">100</span> <span class="keyword">and</span> manager_id <span class="keyword">IN</span>；</span><br></pre></td></tr></table></figure><h3 id="非"><a href="#非" class="headerlink" title="非"></a>非</h3><p>NOT或!</p><p>表示当给定的值为 0 时返回 1 ；当给定的值为非 0 值时返回 0 ；当给定的值为NULL时，返回NULL</p><p>如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> xxx <span class="keyword">from</span> yyy</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> （A <span class="operator">&lt;=&gt;</span><span class="keyword">null</span>）；</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;IT_PROG&#x27;</span>, <span class="string">&#x27;ST_CLERK&#x27;</span>, <span class="string">&#x27;SA_REP&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="与"><a href="#与" class="headerlink" title="与"></a>与</h3><p>AND或&amp;&amp;</p><p>当给定的所有值均为非 0 值，并且都不为NULL时，返回1 ；当给定的一个值或者多个值为 0 时则返回 0 ；否则返回NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, job_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;=</span> <span class="number">10000</span></span><br><span class="line"><span class="keyword">AND</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;%MAN%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="或"><a href="#或" class="headerlink" title="或"></a>或</h3><p>OR或||</p><p>当给定的值都不为NULL，并且任何一个值为非 0 值时，则返回 1 ，否则返回 0 ；当一个值为NULL，并且另一个值为非 0 值时，返回 1 ，否则返回NULL；当两个值都为NULL时，返回NULL</p><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>XOR</p><p>当给定的值中任意一个值为NULL时，则返回NULL；如果两个非NULL的值都是 0 或者都不等于 0 时，则返回 0 ；如果一个值为 0 ，另一个值不为 0 时，则返回 1</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="简述-3"><a href="#简述-3" class="headerlink" title="简述"></a>简述</h3><p><img src="/assets/image-20221023183247-z9gpyki.png" alt="image">​</p><p>这里可以参见C</p><p><img src="/assets/image-20221023183439-byban0v.png" alt="image">​</p><h3 id="按位与"><a href="#按位与" class="headerlink" title="按位与"></a>按位与</h3><p>按位与（&amp;）运算符将给定值对应的二进制数逐位进行逻辑与运算。当给定值对应的二进制位的数值都为 1 时，则该位返回 1 ，否则返回 0。</p><h3 id="按位或"><a href="#按位或" class="headerlink" title="按位或"></a>按位或</h3><p>按位或（|）运算符将给定的值对应的二进制数逐位进行逻辑或运算。当给定值对应的二进制位的数值有一个或两个为 1 时，则该位返回 1 ，否则返回 0 。</p><h3 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或"></a>按位异或</h3><p>按位异或（^）运算符将给定的值对应的二进制数逐位进行逻辑异或运算。当给定值对应的二进制位的数值不同时，则该位返回 1 ，否则返回 0 。</p><h3 id="按位取反"><a href="#按位取反" class="headerlink" title="按位取反"></a>按位取反</h3><p>按位取反（~）运算符将给定的值的二进制数逐位进行取反操作，即将 1 变为 0 ，将 0 变为 1 。</p><h3 id="按位移动"><a href="#按位移动" class="headerlink" title="按位移动"></a>按位移动</h3><p>按位右移（&gt;&gt;）运算符将给定的值的二进制数的所有位右移指定的位数。右移指定的位数后，右边低位的数值被移出并丢弃，左边高位空出的位置用 0 补齐。</p><p>按位左移类似，只是方向改变</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">10</span> <span class="operator">&amp;</span> <span class="operator">~</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>由于按位取反（~）运算符的优先级高于按位与（&amp;）运算符的优先级，所以 10 &amp; ~ 1 ，首先，对数字 1 进行按位取反操作，结果除了最低位为 0 ，其他位都为 1 ，然后与 10 进行按位与操作，结果为 10。</p><h2 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h2><p><img src="/assets/image-20221023183649-l47r3od.png" alt="image">​</p><p>数字编号越大，优先级越高</p><h2 id="REGEXP"><a href="#REGEXP" class="headerlink" title="REGEXP"></a>REGEXP</h2><p>MySQL中使用REGEXP关键字指定正则表达式的字符匹配模式，REGEXP运算符用来匹配字符串，语法格式为：expr REGEXP 匹配条件。如果expr满足匹配条件，返回1 ；如果不满足，则返回 0 。若expr或匹配条件任意一个为NULL，则结果为NULL。</p><p>注意！匹配条件要用‘xxxx’单引号括起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT <span class="string">&#x27;xxguigu&#x27;</span> REGEXP <span class="string">&#x27;gu.gu&#x27;</span>, <span class="string">&#x27;atguigu&#x27;</span> REGEXP <span class="string">&#x27;[ab]‘</span></span><br></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="排序规则"><a href="#排序规则" class="headerlink" title="排序规则"></a>排序规则</h2><ul><li><p>使用 ORDER BY 子句排序</p><ul><li><strong>ASC（ascend）: 升序</strong></li><li><strong>DESC（descend）:降序</strong></li></ul></li><li><p>ORDER BY 子句在SELECT语句的结尾</p></li><li><p>语法顺序应该是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> xxxx</span><br><span class="line"><span class="keyword">from</span> xxxx</span><br><span class="line"><span class="keyword">where</span> xxx <span class="keyword">in</span> xxx</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> xxxx</span><br></pre></td></tr></table></figure></li></ul><p>执行上，顺序是</p><ol><li>from xxx where xxxx</li><li>select（此时才可以指定别名</li><li>order by</li></ol><h2 id="单列排序"><a href="#单列排序" class="headerlink" title="单列排序"></a>单列排序</h2><p>在没有使用排序时，是按照主键的升序来排序的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,last_name,</span><br><span class="line">salary <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><p>上面是一个普通的查询语句，下面使用order by排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, job_id, department_id, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date ;</span><br></pre></td></tr></table></figure><p>默认情况下使用的是升序（省略AES），可以在表名后加上DESC进行降序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, salary<span class="operator">*</span> <span class="number">12</span> annsal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> annsal;</span><br></pre></td></tr></table></figure><p>注意！对于列的别名</p><p>只能在Order by语句中使用，在其他语句中如Where中都是无效的</p><h2 id="多列排序"><a href="#多列排序" class="headerlink" title="多列排序"></a>多列排序</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_id, salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第一列数据中所有值都是唯一的，将不再对第二列进行排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_id <span class="keyword">DESC</span>, salary <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p>这样，则是先按照department_id降序排序,当其相同再按照salary升序排序</p><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><h2 id="简述-4"><a href="#简述-4" class="headerlink" title="简述"></a>简述</h2><p>所谓分页显示，就是将数据库中的结果集，一段一段显示出来需要的条件</p><p>MySQL中使用 LIMIT 实现分页</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIMIT [位置偏移量,] 行数</span><br></pre></td></tr></table></figure><p>第一个“位置偏移量”参数指示MySQL从哪一行开始显示，是一个可选参数，如果不指定“位置偏移量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是 0 ，第二条记录的位置偏移量是1 ，以此类推）；第二个参数“行数”指示返回的记录条数</p><p><strong>注意：LIMIT 子句必须放在整个SELECT语句的最后！</strong></p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--前 10 条记录：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT <span class="number">0</span> , <span class="number">10</span> ;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT <span class="number">10</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--第 11 至 20 条记录：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT <span class="number">10</span> , <span class="number">10</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--第 21 至 30 条记录：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT <span class="number">20</span> , <span class="number">10</span> ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL <span class="number">8.0</span>中可以使用“LIMIT <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">4</span>”，</span><br><span class="line">意思是获取从第 <span class="number">5</span> 条记录开始后面的 <span class="number">3</span> 条记录，</span><br><span class="line">和“LIMIT <span class="number">4</span>,<span class="number">3</span>;”返回的结果相同</span><br></pre></td></tr></table></figure><h2 id="分页显示"><a href="#分页显示" class="headerlink" title="分页显示"></a>分页显示</h2><p>分页显式公式 ：（<strong>当前页数- 1 ）*每页条数，每页条数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line">LIMIT(PageNo <span class="operator">-</span> <span class="number">1</span> )<span class="operator">*</span>PageSize,PageSize;</span><br></pre></td></tr></table></figure><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="一对多表"><a href="#一对多表" class="headerlink" title="一对多表"></a>一对多表</h2><p>一个表中的字段，和其他表的字段建立了联系，表和表之间具有了一对多的关系</p><p>分表，目的是减少内存消耗，提高查询效率（参见优化）</p><p><img src="/assets/1649562093193-20221025222331-cqfu8t0.png" alt="1649562093193">​</p><p><img src="/assets/image-20221025222420-oszhmi9.png" alt="image">​</p><h2 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h2><h3 id="简述-5"><a href="#简述-5" class="headerlink" title="简述"></a>简述</h3><p>假设两个集合 X 和 Y，那么 X 和 Y 的笛卡尔积就是 X 和 Y 的所有可能组合，也就是第一个对象来自于 X，第二个对象来自于 Y 的所有可能。组合的个数即为两个集合中元素个数的乘积数</p><p><img src="/assets/image-20221025223812-7txl18a.png" alt="image">​</p><p>也称作交叉连接（CROSS JOIN）,其作用就是可以把任意表进行连接，即使这两张表不相关</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#案例：查询员工的姓名及其部门名称</span><br><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees, departments;</span><br></pre></td></tr></table></figure><p>这里就涉及了笛卡尔积问题</p><p><img src="/assets/image-20221025223436-1i3xskv.png" alt="image">​</p><p>可以看到每一个last_name都对应了多个department_name，这是因为last和每一个department都匹配了一次，这就是笛卡尔积错误</p><p><img src="/assets/image-20221025222428-t4k833q.png" alt="image">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#查询员工姓名和所在部门名称</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name <span class="keyword">FROM</span> </span><br><span class="line">employees,departments;</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name <span class="keyword">FROM</span> </span><br><span class="line">employees <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> departments;</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name <span class="keyword">FROM</span> </span><br><span class="line">employees <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments;</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name <span class="keyword">FROM</span> </span><br><span class="line">employees <span class="keyword">JOIN</span> departments;</span><br></pre></td></tr></table></figure><p>以上都是会出现笛卡尔积错误的情况</p><h3 id="两表的连接条件"><a href="#两表的连接条件" class="headerlink" title="两表的连接条件"></a>两表的连接条件</h3><p>查询employes_id,department_name</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees, departments;</span><br></pre></td></tr></table></figure><p>已知这样会产生笛卡尔积问题，则需要使用连接条件（筛选），得到想要的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees, departments</span><br><span class="line"><span class="keyword">where</span> employees.departments_name<span class="operator">=</span>departments.departments_name</span><br></pre></td></tr></table></figure><p><img src="/assets/1649562093193-20221025225640-7ds6czi.png" alt="1649562093193">​</p><p>如图，建立相等时的连接</p><h3 id="指定"><a href="#指定" class="headerlink" title="指定"></a>指定</h3><p>查询employes_id,department_name,dapartment_id；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_name,dapartment_id</span><br><span class="line"><span class="keyword">FROM</span> employees, departments;</span><br></pre></td></tr></table></figure><p>此时则会报错，因为department_id在employees和department两表中均存在，对于这次查询来说department_id是模糊的，不知道该从那一张表查询  </p><p><img src="/assets/1649562093193-20221025225640-7ds6czi.png" alt="1649562093193">​</p><p>如图，同时存在，则需要指定查询表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">employees.departments_id</span><br></pre></td></tr></table></figure><p>指定在employees表中查询departments_id</p><p>为什么last_name, department_name可以不指定？因为他们在这次查询中是唯一存在在一张表中的不会模糊，但是实际上是否会模糊都建议加上表名（从sql优化的角度）</p><h2 id="表的别名"><a href="#表的别名" class="headerlink" title="表的别名"></a>表的别名</h2><p>表的别名可以在select和where里使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id, e.last_name, e.department_id,</span><br><span class="line">d.department_id, d.location_id</span><br><span class="line"><span class="keyword">FROM</span> employees e , departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p>由执行顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xxx <span class="keyword">where</span> xxxx</span><br><span class="line"><span class="keyword">select</span>（此时才可以指定别名</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br></pre></td></tr></table></figure><p>可知在from中定义了表的别名后，在select和where等中都可以使用，注意！如果我们使用了表的别名，在查询字段中、过滤条件中就只能使用别名进行代替，不能使用原有的表名，否则就会报错</p><h2 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h2><p>例题</p><p>查询出公司员工的 last_name,department_name, city</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.`department_id`,</span><br><span class="line">employees.`last_name`,</span><br><span class="line">departments.`department_name`,</span><br><span class="line">locations.`city` </span><br><span class="line"><span class="keyword">FROM</span> employees,</span><br><span class="line">departments,locations</span><br><span class="line"><span class="keyword">WHERE</span> employees.`department_id`</span><br><span class="line"><span class="operator">=</span> departments.`department_id`<span class="keyword">AND</span></span><br><span class="line">departments.`location_id` <span class="operator">=</span> </span><br><span class="line">locations.`location_id`;</span><br></pre></td></tr></table></figure><p><img src="/assets/1649562093193-20221025233544-o1jtbxw.png" alt="1649562093193">​</p><p>多（n）表连接需要至少n-1个连接条件，注意！连接条件需要逻辑运算符连接</p><h2 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h2><p>在上面的连接语句中，使用的都是等于条件连接，这样的连接即等值连接，使用其他比较运算符即称为非等值连接</p><p>例</p><p><img src="/assets/image-20221026081308-8chlt9p.png" alt="image">​</p><p>查询每位员工在Job_Grades中的等级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, j.grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees e, job_grades j</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="keyword">BETWEEN</span> j.lowest_sal <span class="keyword">AND</span> j.highest_sal;</span><br></pre></td></tr></table></figure><p>返回所有e.salary位于j.lowest_sal AND j.highest_sal之间的结果，当然也可以改写成大于等于小于等于符号；</p><p>最后还可以使用Order by排序</p><p><img src="/assets/image-20221026081514-rsemshz.png" alt="image">​</p><h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><h3 id="自我引用"><a href="#自我引用" class="headerlink" title="自我引用"></a>自我引用</h3><p>上面的所有连接都是非自连接，是不同的表进行连接。同时，表中的数据是可以自我引用的，如</p><p><img src="/assets/image-20221026082353-xlr08zx.png" alt="image">​</p><p>这张表里，每一个员工有一个id，员工也有一个主管，主管本身就是员工也有员工id，主管编号和员工编号构成了自我引用。</p><h3 id="进行自连接"><a href="#进行自连接" class="headerlink" title="进行自连接"></a>进行自连接</h3><p>ex.  </p><p>查询员工id，姓名和管理者的id，姓名。</p><p>这个操作可以试看成在两张employees表（物理上本质还是一张表）间连连接，左表的manager_id和右表的employee_id连接，</p><p><img src="/assets/image-20221026083033-xwpzxbh.png" alt="image"><img src="/assets/image-20221026083125-95p46ct.png" alt="image"></p><p>在操作中，为了区别左右表，需要给他们起别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> employees worker,employees manager;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20221026082907-3746kfd.png" alt="image">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> worker.employee_id,worker.last_name,</span><br><span class="line">manager.employee_id,manager.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees worker,employees manager</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>建立连接</span><br><span class="line"><span class="keyword">WHERE</span> worker.`manager_id` <span class="operator">=</span> manager.`employee_id`;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/assets/image-20221026084256-zrlsk41.png" alt="image">​</p><h2 id="内连接和外连接"><a href="#内连接和外连接" class="headerlink" title="内连接和外连接"></a>内连接和外连接</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>合并具有同一列的两个以上的表的行, 结果集中不包含一个表与另一个表不匹配的行。</p><p>简单来说就是结果集只返回满足查询条件的行。</p><p>对于上面非等值连接中的例子可知，存在没有manager的员工，也就是manager为null，这样的行，因为manager表中没有null行，所以其不会通过结果集返回。</p><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h4 id="简述-6"><a href="#简述-6" class="headerlink" title="简述"></a>简述</h4><p>一般情况，查询所有（员工）的xxx则需要外连接 </p><p>这里使用的是SQL99的语法</p><p><img src="/assets/image-20221026091605-qqdz24e.png" alt="image">​</p><p>如左连接，多显示左表数据，这个时候右表中提取的数据数量就少了，右表不足的部分则返回空</p><p>使用的是join xxxx on语句进行外连接</p><h4 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a><strong>左连接</strong></h4><p>左连接就是将JOIN前面的表中所有记录都展示出来。</p><p>Teachers教师表链接Students学生表，通过教师字段Tid连接。</p><p><img src="/assets/image-20221026104729-a869niw.png" alt="image">​</p><p><img src="/assets/image-20221026104736-mxpx5w2.png" alt="image">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Teachers <span class="keyword">AS</span> t，Students <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">where</span> t.Tid <span class="operator">=</span> s.Tid；</span><br></pre></td></tr></table></figure><p>结果中只显示了张三和李四两个老师。</p><p>实际上，where就是”join”，也就是内连接，也就是说，使用where语句也能改写成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Teachers <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">JOIN</span> Students <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">ON</span> t.Tid <span class="operator">=</span> s.Tid</span><br></pre></td></tr></table></figure><p>这里的Join就是将两表连接，On，通过某某条件。</p><p>如果我们想要显示所有老师，不管这个老师有没有对应的学生。这个时候就应该用到LEFT JOIN 左连接了。将前面的Teachers表中所有记录都展示出来，也就是Join左侧的表全显示。</p><p>ex.</p><p>Teachers教师表连接Students学生表，通过教师字段Tid连接，老师要全部显示出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Teachers <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Students <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">ON</span> t.Tid <span class="operator">=</span> s.Tid</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20221026111852-4m2k4at.png" alt="image">​</p><p>这样就建立了左连接，所有老师都显示出来了</p><h4 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h4><p>右连接就是将JOIN后面的表中所有记录都展示出来。跟左连接是对应互通的。</p><p>比如我们可以将上面Teachers表和Students表互换，再将LEFT JOIN改成RIGHT JOIN，输出结果基本是一样的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Students <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> Teachers <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">ON</span> t.Tid <span class="operator">=</span> s.Tid</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20221026112214-526dxwe.png" alt="image">​</p><p>与LEFT JOIN输出的记录是一样的，唯一的区别是：</p><p>Students表中的列（Sid、Sname等）在前面，Teachers表中的列（Tid、Tname）在后面，因为Teacher在连接的右侧。</p><h4 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h4><p>FYLL JOIN</p><p>MySQL中不支持 FULL JOIN，实际业务中，基本不用全连接。全连接的结果集结合了 LEFT JOIN 和 RIGHT JOIN 的结果集。简单来说就是不重要。</p><p>MySQL不支持FULL JOIN，但是可以用 LEFT JOIN UNION RIGHT join代替。</p><h2 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h2><p><strong>合并查询结果</strong>利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用UNION或UNION ALL关键字分隔。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>,... <span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>,... <span class="keyword">FROM</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure><p><img src="/assets/image-20221026122304-ba487b4.png" alt="image">​</p><p>UNION 操作符返回两个查询的结果集的并集，去除重复记录。重复记录只保留一份。</p><p><img src="/assets/image-20221026122335-9zxoj5l.png" alt="image">​</p><p>UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，不去重，也就是交集部分出现两次。</p><p>注意：执行UNION ALL语句时所需要的资源比UNION语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用UNION ALL语句，以提高数据查询的效率。也就是说尽量使用union on；</p><h2 id="joins"><a href="#joins" class="headerlink" title="joins"></a>joins</h2><p>join可以连接多表，但超过三个表禁止使用join</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">from</span> xxxx <span class="keyword">join</span> xxxx <span class="keyword">on</span> xxxx</span><br><span class="line"><span class="keyword">join</span> xxxx <span class="keyword">on</span> xxxx；</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20221026122721-il44jrb.png" alt="image">​</p><p>由于mysql不支持full join，直接实现左下图和右下图是不行的。</p><p>但是使用union可以实现。</p><p>中图：内连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#中图：内连接 A∩B</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>左上图：左外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#左上图：左外连接</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`;</span><br></pre></td></tr></table></figure><p>右上图：右外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#右上图：右外连接</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`;</span><br></pre></td></tr></table></figure><p>左图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_id` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p><img src="/assets/image-20221026124737-movs1kg.png" alt="image"></p><p>对于这张图，假设A表查询其中的name，id两个字段，B表查询id，department两字段，通过id，AB表建立了连接。此时，做左连接，也就是A脚长，则id和department会使用null补偿，AB的交集必然是非null</p><p>对于上述代码，where筛选保留了department_id为null也就是补偿的行，而非null也就是AB共有的被筛去，留下A中的null；</p><p>简单来说，去掉公共部分，对于公共部分，department_id不可能为空。</p><p>右图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p>左下：满外连接</p><p>左图与右上图的union</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_id` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span> #没有去重操作，效率高</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`;</span><br></pre></td></tr></table></figure><p>右下：</p><p>左图与右中的union</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_id` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><h2 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h2><p>SQL 99 在 SQL 92 的基础上提供了一些特殊语法，比如 ​NATURAL JOIN​ 用来表示自然连接。我们可以把自然连接理解为 SQL 92 中的等值连接。它会帮你自动查询两张连接表中​所有相同的字段​，然后进行​等值连接​。</p><p>在SQL 92 标准中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">AND</span> e.`manager_id` <span class="operator">=</span> d.`manager_id`;</span><br></pre></td></tr></table></figure><p>在 SQL 99 中可以写成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> departments d;</span><br></pre></td></tr></table></figure><p>这样就自动实现了多表的等值连接</p><h2 id="USING"><a href="#USING" class="headerlink" title="USING"></a>USING</h2><p>当我们进行连接的时候，SQL 99 还支持使用 USING 指定数据表里的同名字段进行等值连接。但是只能配合JOIN一起使用。比如：q</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">USING</span> (department_id);</span><br></pre></td></tr></table></figure><p>你能看出与自然连接 NATURAL JOIN 不同的是，USING 指定了具体的相同的字段名称，你需要在 USING的括号 () 中填入要指定的同名字段。同时使用 JOIN…USING 可以简化 JOIN ON 的等值连接。它与下面的 SQL 查询结果是相同的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e ,departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id; </span><br></pre></td></tr></table></figure><p>也就是说，Using也是一种自动连接，输入字段名即可自动匹配（不能于自连接中使用），使用较少</p><h4 id="成对比较"><a href="#成对比较" class="headerlink" title="成对比较"></a>成对比较</h4><p>查询与 141 号员工的 manager_id,department_id<br>相同的其他员工的信息（同上）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> (manager_id, department_id) <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">141</span>,<span class="number">174</span>))</span><br><span class="line"><span class="keyword">AND</span> employee_id <span class="operator">&lt;&gt;</span> <span class="number">141</span>;</span><br></pre></td></tr></table></figure><p>本质区别不大，前提是两个 where 的条件相同，则外查询 where 后括号内内列名可以和内查询 select 后的列名匹配，共有 where 的条件</p><h4 id="having-子查询"><a href="#having-子查询" class="headerlink" title="having 子查询"></a>having 子查询</h4><p>只是将 where 查询改为了 having，本质区别不大</p><p>查询最低工资大于 50 号部门最低工资的部门的部门 id 和其最低工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id,<span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary) <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span>);</span><br></pre></td></tr></table></figure><h4 id="case-子查询"><a href="#case-子查询" class="headerlink" title="case 子查询"></a>case 子查询</h4><p>显式员工的 employee_id,last_name 和 location。其中，若员工 department_id 与 location_id 为 1800 的 department_id 相同，则 location 为’Canada’，其余则为’USA’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name,</span><br><span class="line">(<span class="keyword">CASE</span> department_id</span><br><span class="line"><span class="keyword">WHEN</span></span><br><span class="line">(<span class="keyword">SELECT</span> department_id <span class="keyword">FROM</span> departments </span><br><span class="line"><span class="keyword">WHERE</span> location_id <span class="operator">=</span> <span class="number">1800</span>)</span><br><span class="line"><span class="keyword">THEN</span> <span class="string">&#x27;Canada&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;USA&#x27;</span> <span class="keyword">END</span>) location</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h2 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h2><h3 id="简述-7"><a href="#简述-7" class="headerlink" title="简述"></a>简述</h3><ul><li>也称为集合比较子查询</li><li>内查询返回多行</li><li>使用多行比较操作符</li></ul><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>IN</td><td>等于列表中的<strong>任意一个</strong></td></tr><tr><td>ANY</td><td>需要和单行比较操作符一起使用，和子查询返回的 <strong>某一个</strong> 值比较</td></tr><tr><td>ALL</td><td>需要和单行比较操作符一起使用，和子查询返回的 <strong>所有</strong> 值比较</td></tr><tr><td>SOME</td><td>实际上是 ANY 的别名，作用相同，一般常使用 ANY</td></tr></tbody></table><p>这里要注意 any 和 all 的区别</p><p>这些运算符都搭配单行运算符使用</p><h3 id="使用例"><a href="#使用例" class="headerlink" title="使用例"></a>使用例</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>返回其它 job_id 中比 job_id 为‘IT_PROG’部门任一工资低的员工的员工号、姓名、job_id 以及 salary</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_id,employee_id,last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;</span> <span class="keyword">ANY</span> (</span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> job_id <span class="operator">&lt;&gt;</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br></pre></td></tr></table></figure><p>返回其它 job_id 中比 job_id 为‘IT_PROG’部门所有工资低的员工的员工号、姓名、job_id 以及 salary</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_id,employee_id,last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;</span> <span class="keyword">ALL</span> (</span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> job_id <span class="operator">&lt;&gt;</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br></pre></td></tr></table></figure><p>当然也可使用单行函数</p><h4 id="FROM-和子查询"><a href="#FROM-和子查询" class="headerlink" title="FROM 和子查询"></a>FROM 和子查询</h4><p>注意！子查询结果可做 from 的表，或者说，查询结果就是一张表。</p><p>查询平均工资最低的部门 id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(avg_sal)</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">) dept_avg_sal</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这里是把子查询的结果作为新表放到 from 后，在子查询结果集里查询</p><p>最内层</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">) dept_avg_sal</span><br></pre></td></tr></table></figure><p>查询平均工资，起别名为 avg_sal（这里是为了外层的 MIN 能够通过别名调用平均工资列），后以 department_id 分组，给结果集(表）起别名为 dept_avg_sal（必须给结果集起别名才能在 from 里使用）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(avg_sal)</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">) dept_avg_sal</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在该结果集里找到最低工资（也就是最低平均工资），外层有平均工资等于该最低工资，找到最低平均工资的部门</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#方式 <span class="number">2</span> ：</span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&lt;=</span> <span class="keyword">ALL</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>方式二，也就是找到一个部门，他的平均工资小于等于所有（任意）部门的平均工资</p><h2 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h2><h3 id="简述-8"><a href="#简述-8" class="headerlink" title="简述"></a>简述</h3><p>上面的案例查询都是不相关子查询，没有涉及到不相关子查询。</p><p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为​关联子查询​。</p><p>在上面的非相关子查询中，执行顺序是：</p><ol><li>内查询执行，返回结果集</li><li>外查询执行，外查询的每一行都和内查询的结果比较</li></ol><p>在相关子查询中，相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询</p><p><img src="/assets/image-20221027193116-yangl45.png" alt="image">​</p><ol><li>取外表中的一条记录（获取候选列）</li><li>送入子查询，子查询运行</li><li>返回子查询结果和送入的结果，对 where 条件判断是否符合，不符合则筛选此记录</li></ol><h3 id="使用例-1"><a href="#使用例-1" class="headerlink" title="使用例"></a>使用例</h3><p>查询员工中工资大于本部门平均工资的员工的 last_name,salary 和其 department_id</p><p><img src="/assets/image-20221027193614-falsjgh.png" alt="image">​</p><p>在from语句，指定了employees作为outer（这是个别名，可以是任取），首先，employees里的第一条数据被取入到内循环中，执行查找语句根据department_id查找平均工资，此时例如传入id为90，对于内查询的where语句，则会在内查询中筛选出id为90的结果，再进入外查询，筛选符合条件的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees e2</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> e1.department_id</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>总之，可以视作双层for循环</p><p>另外，也可以使用from子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary,e1.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e1,(<span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary) dept_avg_sal <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.`department_id` <span class="operator">=</span> e2.department_id</span><br><span class="line"><span class="keyword">AND</span> e2.dept_avg_sal <span class="operator">&lt;</span> e1.`salary`;</span><br></pre></td></tr></table></figure><p>from型的子查询：子查询是作为from的一部分，子查询要用()引起来，并且要给这个子查询取别名， 把它当成一张“临时的虚拟的表”来使用。</p><p>内层select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br></pre></td></tr></table></figure><p>返回各个部门的平均工资，在外层from里，基于这个结果集，筛选e1也就是完整的employees表中salary低于均值的记录，返回。</p><p>from式使用得会更多</p><h4 id="Order-by子查询"><a href="#Order-by子查询" class="headerlink" title="Order by子查询"></a>Order by子查询</h4><p>查询员工的id,salary,按照department_name 排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (</span><br><span class="line"><span class="keyword">SELECT</span> department_name</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>注意！除group up和limit外，其他地方都可以使用子查询</p><h4 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h4><p>若employees表中employee_id与job_history表中employee_id相同的数目不小于 2 ，输出这些相同id的员工的employee_id,last_name和其job_id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id, last_name,e.job_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">2</span> <span class="operator">&lt;=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> job_history</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> e.employee_id);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="EXISTS-与-NOT-EXISTS"><a href="#EXISTS-与-NOT-EXISTS" class="headerlink" title="EXISTS 与 NOT EXISTS"></a>EXISTS 与 NOT EXISTS</h3><p>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</p><ul><li><p><strong>如果在子查询中不存在满足条件的行：</strong></p><ul><li>条件返回 FALSE</li><li>继续在子查询中查找</li></ul></li><li><p><strong>如果在子查询中存在满足条件的行：</strong></p><ul><li>不在子查询中继续查找</li><li>条件返回 TRUE</li></ul></li><li><p>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</p></li></ul><p><strong>查询公司管理者的employee_id，last_name，job_id，department_id信息</strong></p><ol><li><p>使用自连接</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> e1.employee_id, e1.last_name, e1.job_id, e1.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e1 <span class="keyword">JOIN</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e1.employee_id <span class="operator">=</span> e2.manager_id;</span><br></pre></td></tr></table></figure></li><li><p>子查询（无exist）</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,job_id,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>exist</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, job_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> ( <span class="keyword">SELECT</span> <span class="number">1</span><span class="operator">/</span><span class="operator">/</span>这里不重要<span class="keyword">select</span>都行</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e2.manager_id <span class="operator">=</span></span><br><span class="line">e1.employee_id);</span><br></pre></td></tr></table></figure></li></ol><p>方式三是关联子查询和exist的结合，相较于无exist的关联子查询，这种方式在内查询结果不匹配时返回false，继续执行，一旦符合，返回ture，停止不在向后执行。</p><p><strong>查询departments表中，不存在于employees表中的部门的department_id和department_name</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, department_name</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> d.department_id);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE，也就是说，not exist只接收不满足某条件的记录</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2023/01/21/MyBatis/"/>
      <url>/2023/01/21/MyBatis/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li>MyBatis 支持定制化 SQL、存储过程以及高级映射(字段和属性不一致，一对多或多对一映射)</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及结果集解析操作</li><li>MyBatis 可以使用简单的 XML 或注解实现配置和原始映射；将接口和 Java 的 POJO（Plain Ordinary Java Object，普通的 Java 对象）映射成数据库中的记录</li><li>Mybatis 是一个半自动的 ORM（Object Relation Mapping）框架(对象-关系映射)</li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="Maven-导入依赖"><a href="#Maven-导入依赖" class="headerlink" title="Maven 导入依赖"></a>Maven 导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="准备配置文件"><a href="#准备配置文件" class="headerlink" title="准备配置文件"></a>准备配置文件</h2><p>Mybatis 全局配置文件</p><p>习惯上命名为 mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合 Spring 之后，这个配置文件可以省略。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- environment表示配置Mybatis的一个具体的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- Mybatis的内置的事务管理器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">                <span class="comment">&lt;!-- 建立数据库连接的具体信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis-example&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;atguigu&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper注册：指定Mybatis映射文件的具体位置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mapper标签：配置一个具体的Mapper映射文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/EmployeeMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>存放的位置是 src&#x2F;main&#x2F;resources 目录下</p><h2 id="Mapper-接口"><a href="#Mapper-接口" class="headerlink" title="Mapper 接口"></a>Mapper 接口</h2><p>Mybatis 中的 Mapper 接口相当于以前的 Dao。但是区别在于，Mapper 仅仅只是建接口即可，我们不需要提供实现类。</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230114101543-4g7apsh.png" alt="image">​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">  </span><br><span class="line">    Employee <span class="title function_">selectEmployee</span><span class="params">(Integer empId)</span>;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis-映射文件"><a href="#Mybatis-映射文件" class="headerlink" title="Mybatis 映射文件"></a>Mybatis 映射文件</h2><p>相关概念：ORM（Object Relationship Mapping）对象关系映射。</p><ul><li>对象：Java 的实体类对象</li><li>关系：关系型数据库</li><li>映射：二者之间的对应关系</li></ul><p>下表列举的是最简单的单表映射（一个表和一个类）：</p><table><thead><tr><th>Java 概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段&#x2F;列</td></tr><tr><td>对象</td><td>记录&#x2F;行</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mapper是根标签，namespace属性：在Mybatis全局范围内找到一个具体的Mapper配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入接口后，为了方便通过接口全类名来找到Mapper配置文件，所以通常将namespace属性设置为接口全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType属性：指定封装查询结果的Java实体类的全类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mybatis负责把SQL语句中的#&#123;&#125;部分替换成“?”占位符，在#&#123;&#125;内部还是要声明一个见名知意的名称 --&gt;</span></span><br><span class="line">        select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#&#123;empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：EmployeeMapper.xml 所在的目录要和 mybatis-config.xml 中使用 mapper 标签配置的一致</p><p>一张表——–&gt; 实体类 —-&gt; 对应当前的 mapper 接口—-对应一个映射文件  *mapper 接口中的方法—–&gt; 对应映射文件中的 SQL 语句</p><h2 id="添加测试"><a href="#添加测试" class="headerlink" title="添加测试"></a>添加测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectEmployee</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 1.创建SqlSessionFactory对象</span></span><br><span class="line">    <span class="comment">// ①声明Mybatis全局配置文件的路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">mybatisConfigFilePath</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// ②以输入流的形式加载Mybatis配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(mybatisConfigFilePath);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// ③基于读取Mybatis配置文件的输入流创建SqlSessionFactory对象</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 2.使用SqlSessionFactory对象开启一个会话</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sessionFactory.openSession();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 3.根据Mapper配置文件的名称空间+SQL语句的id找到具体的SQL语句</span></span><br><span class="line">    <span class="comment">// 格式是：名称空间.SQL语句的id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="string">&quot;com.atguigu.mybatis.dao.EmployeeMapper.selectEmployee&quot;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 要传入SQL语句的参数</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">empId</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 执行SQL语句</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> session.selectOne(statement, empId);</span><br><span class="line">  </span><br><span class="line">    System.out.println(<span class="string">&quot;o = &quot;</span> + result);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 4.关闭SqlSession</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SqlSession：代表 Java 程序和数据库之间的会话。（HttpSession 是 Java 程序和浏览器之间的会话）</li><li>SqlSessionFactory：是“生产”SqlSession 的“工厂”。</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUsrMapperInterface</span><span class="params">()</span> &#123;</span><br><span class="line">    补充测试方法</span><br><span class="line">    <span class="comment">// 1.根据EmployeeMapper接口的Class对象获取Mapper接口类型的对象</span></span><br><span class="line">    <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.调用EmployeeMapper接口的方法完成对数据库的操作</span></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> employeeMapper.selectEmployee(<span class="number">1L</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 3.打印查询结果</span></span><br><span class="line">    System.out.println(<span class="string">&quot;emp = &quot;</span> + emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关闭前最后提交事务：sqlSession.commit();</p><p>另外还有一仲不使用接口的方式，sqlSession 可以调用如 insert 等方法，接受参数为 namespace.sqlId;</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230114132245-w3wcn6f.png" alt="image">​</p><p>在获取 sqlSession 时 <code> SqlSession session = sessionFactory.openSession();</code>​，这个方法接受一个参数来设置<strong>自动提交，true表示自动提交；</strong></p><p>其他的 update 等都是类似的，这时我们的 sql 还都是静态的；</p><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><p>日志级别</p><p>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)，从左到右打印的内容越来越详细</p><p>STDOUT</p><p>是 standard output 的缩写，意思是标准输出。对于 Java 程序来说，打印到标准输出就是打印到控制台。</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  &lt;select id=<span class="string">&quot;getUserById&quot;</span>&gt;</span><br><span class="line">      select * from t_user <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>这时我们考虑返回值如何拿到；我们要通过 ResultMap&#x2F;Type 来解决；要在 select 标签中声明 ResultType;（Result 是自定义映射）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserById&quot;</span> resultType=<span class="string">&quot;com.hkk.mybatis.pojo.User&quot;</span>&gt;</span><br><span class="line">    select * from t_user <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>ResultType，查询结果为 java 对应类型；</p><p>如果是多行查询，但是 java 中有对应实体类，那么，resultType 也还是 list 中的元素的类型而不是 list 类型，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserById&quot;</span> resultType=<span class="string">&quot;com.hkk.mybatis.pojo.User&quot;</span>&gt;</span><br><span class="line">      select * from t_user where id &gt;=<span class="number">1</span>;</span><br><span class="line">  &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>目前这样的查询只会返回一个对象，想要返回 list 还需要修改；</p><h1 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h1><h2 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h2><p>用于设置环境</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- environment表示配置Mybatis的一个具体的环境 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">&lt;!-- Mybatis的内置的事务管理器 类型一个是JDBC一个是MANAGED--&gt;</span></span><br><span class="line">jdbc是原生管理，比如手动设置提交等</span><br><span class="line">mannaged是被管理的，比如后继用Spring管理；</span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">这个type设置数据源类型，有POLLED，UNPOLLED，JNDI</span><br><span class="line">分别表示数据库连接池，非连接池， 使用上下文的数据源</span><br><span class="line">==================</span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">&lt;!-- 建立数据库连接的具体信息 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc123&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 建立数据库连接的具体信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc123&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这一段内容可以用 properties 文件配置；</p><p>jdbc.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&amp;amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">abc123</span></span><br></pre></td></tr></table></figure><p>引入配置：在核心配置中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;configuration&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;properties</span> <span class="string">resource=&quot;jdbc.properties&quot;/&gt;</span></span><br><span class="line">    <span class="attr">&lt;!--</span> <span class="string">environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --&gt;</span></span><br><span class="line">    <span class="attr">&lt;environments</span> <span class="string">default=&quot;development&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>这样，我们就可以在核心配置文件中用 ${key}的方式访问 value</p><p>总之 properties 标签的作用就是引入 properties 文件；</p><h2 id="typeAliases-类型别名"><a href="#typeAliases-类型别名" class="headerlink" title="typeAliases 类型别名"></a>typeAliases 类型别名</h2><p>比如各种全类名(resultType 等)；</p><typeAliases><p>‍</p><p>‍</p><pre><code>&lt;typeAlias type=&quot;原类名&quot; alisa=&quot;别名&quot;&gt;</code></pre><p>作用范围包括核心配置文件，sql 语句等；</p><p>当只设置 type 而不设置 alisa 时，会给一个默认别名，比如 com.xxx.user，那么他的别名默认就是 user 和 User，不区分大小写</p><p>在 typeAliases 标签里还有一个 <package> 标签，属性 name，name 就是包名，表示这个包下面的所有类<strong>都会被赋默认别名</strong></p><h2 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h2><p>mapper 和别名类似，也可以以包为单位设置映射文件引入；但需要满足：</p><ol><li>mapper 接口和映射文件必须在同一个包下</li><li>接口名和对应映射文件名必须相同</li></ol><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230114151136-vrq6l83.png" alt="image">​</p><p>resources 这个 mapper 一定要和 java 上面的个 mapper 一致</p><h1 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h1><h2 id="方式"><a href="#方式" class="headerlink" title="#{}方式"></a>#{}方式</h2><p>Mybatis 会在运行过程中，把配置文件中的 SQL 语句里面的#{}转换为“?”占位符，发送给数据库执行。</p><p>配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;delete</span> <span class="string">id=&quot;deleteEmployeeById&quot;&gt;</span></span><br><span class="line">    <span class="attr">delete</span> <span class="string">from t_emp where emp_id=#&#123;empId&#125;</span></span><br><span class="line"><span class="attr">&lt;/delete&gt;</span></span><br></pre></td></tr></table></figure><p>实际执行的就是：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">delete</span> <span class="string">from t_emp where emp_id=?</span></span><br></pre></td></tr></table></figure><h2 id="方式-1"><a href="#方式-1" class="headerlink" title="${}方式"></a>${}方式</h2><p>和#{}不同，这仲方式会产生 SQL 注入的问题，原理就是字符串拼接</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">&lt;select</span> <span class="string">id=&quot;selectEmployeeByName&quot; resultType=&quot;com.atguigu.mybatis.entity.Employee&quot;&gt;</span></span><br><span class="line">    <span class="attr">select</span> <span class="string">emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_name like &#x27;%$&#123;empName&#125;%&#x27;</span></span><br><span class="line"><span class="attr">&lt;/select&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取参数的几种情况"><a href="#获取参数的几种情况" class="headerlink" title="获取参数的几种情况"></a>获取参数的几种情况</h2><h3 id="简单类型的单参数"><a href="#简单类型的单参数" class="headerlink" title="简单类型的单参数"></a>简单类型的单参数</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;select</span> <span class="string">id=&quot;getUserByUsername&quot; resultType=&quot;com.hkk.mybatis.pojo.User&quot;&gt;</span></span><br><span class="line">     <span class="attr">select</span> <span class="string">* from t_user where username =  #&#123;username&#125;;</span></span><br><span class="line"> <span class="attr">&lt;/select&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">User</span> <span class="string">getUSerByUsername(String username);</span></span><br></pre></td></tr></table></figure><p>#{username}配置文件中的这里，括号内的形参名和查询操作是无关的，但一般建议同名；</p><p>另外的，使用 ${ }时除了 sql 注入问题，还要注意引号，比如 String，Date 在 SQL 查询时应该加上引号,如‘${xxxxx}’,但是#是占位符形式，则无需关注引号了；总之一般情况下，能#就#，不能才$;</p><h3 id="简单类型的多参数"><a href="#简单类型的多参数" class="headerlink" title="简单类型的多参数"></a>简单类型的多参数</h3><p>和单参数不同，多参数的 mybatis 的 SQL 语句里的参数需要使用下面的方法调用</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;select</span> <span class="string">id=&quot;checkLogin&quot; resultType=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="attr">select</span> <span class="string">* from t_user where username= #&#123;arg0&#125;</span></span><br><span class="line"><span class="attr">and</span> <span class="string">password = #&#123;arg1&#125;;</span></span><br><span class="line"><span class="attr">&lt;select&gt;</span></span><br></pre></td></tr></table></figure><p>这样调用时，输入的两个参数就是按照 0 开始，按顺序放入 sql 语句中；</p><p>另外也可以使用 param1 到 2，3 等来调用；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;select</span> <span class="string">id=&quot;checkLogin&quot; resultType=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="attr">select</span> <span class="string">* from t_user where username= #&#123;param1&#125;</span></span><br><span class="line"><span class="attr">and</span> <span class="string">password = #&#123;param2&#125;;</span></span><br><span class="line"><span class="attr">&lt;select&gt;</span></span><br></pre></td></tr></table></figure><p>这是由于 mabatis 的参数是由一个 map 存放的，以两种方式 argx 和 paramx 为 key，value 为实际参数；arg0，arg1….param1，param2….</p><h3 id="以-map-作为参数"><a href="#以-map-作为参数" class="headerlink" title="以 map 作为参数"></a>以 map 作为参数</h3><p>接口方法，传入一个 map</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">User</span> <span class="string">checkLoginByMap(Map&lt;String,Object&gt; map);</span></span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;select</span> <span class="string">id=&quot;checkLoginByMap&quot; resultType=&quot;com.hkk.mybatis.pojo.User&quot;&gt;</span></span><br><span class="line">    <span class="attr">select</span> <span class="string">* from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span></span><br><span class="line"><span class="attr">&lt;/select&gt;</span></span><br></pre></td></tr></table></figure><p>当调用时，只需要传入一个 map，包含两个元素，分别以 username 和 password 为 key，那么这样这个 sql 语句就可以调用到这里面的 value 了；</p><h3 id="实体类型参数"><a href="#实体类型参数" class="headerlink" title="实体类型参数"></a>实体类型参数</h3><p>在 mybatis 里，所谓实体类的属性，实际上是 get&#x2F;set 方法去掉前缀后剩余的部分，转为小写；比如 getId，对应 id 这个属性；只和 get 和 set 方法有关；比如</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">public</span> <span class="string">void getId（）&#123;</span></span><br><span class="line"><span class="attr">return</span> <span class="string">name；</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>在这个 get 方法里，返回的是类的 name 成员变量，但是作为属性，这个 name 就是 id 这个属性；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;insert</span> <span class="string">id=&quot;insertUser&quot;&gt;</span></span><br><span class="line">    <span class="attr">insert</span> <span class="string">into t_user (id, username, password, age, gender, email)</span></span><br><span class="line">    <span class="attr">values</span> <span class="string">(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;gender&#125;,#&#123;email&#125;);</span></span><br><span class="line"><span class="attr">&lt;/insert&gt;</span></span><br></pre></td></tr></table></figure><p>这里的#{username}等，就会调用传入对象的 getxxx 方法，获得一个值，填充到 sql 里；</p><h3 id="注解获取参数"><a href="#注解获取参数" class="headerlink" title="注解获取参数"></a>注解获取参数</h3><p>java 接口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">User</span> <span class="string">checkLoginByParam(String username,String password);</span></span><br></pre></td></tr></table></figure><p>我们可以在这个接口上加上注解：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">User</span> <span class="string">checkLoginByParam(</span></span><br><span class="line"><span class="attr">@Param(&quot;username&quot;)String</span> <span class="string">username,</span></span><br><span class="line"><span class="attr">@Param(&quot;passworld&quot;)String</span> <span class="string">password);</span></span><br></pre></td></tr></table></figure><p>@Param(xxx)这个注解会把注解内容xxx作为底层map的key，这样，就在配置里，#{xxx}就可以直接找到对应的value，这使我们可以自定义map</p><h1 id="查询返回"><a href="#查询返回" class="headerlink" title="查询返回"></a>查询返回</h1><h2 id="单个简单类型"><a href="#单个简单类型" class="headerlink" title="单个简单类型"></a>单个简单类型</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;select</span> <span class="string">id=&quot;selectEmpCount&quot; resultType=&quot;int&quot;&gt;</span></span><br><span class="line">    <span class="attr">select</span> <span class="string">count(*) from t_emp</span></span><br><span class="line"><span class="attr">&lt;/select&gt;</span></span><br></pre></td></tr></table></figure><p>非常常规，调用返回一个int；</p><p>Mybatis 内部给常用的数据类型设定了很多别名。 以 int 类型为例，可以写的名称有：int、integer、Integer、java.lang.Integer、Int、INT、INTEGER 等等。</p><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">User</span> <span class="string">getUserById(@Param(&quot;id&quot;) Integer id);</span></span><br></pre></td></tr></table></figure><p>习惯给方法加上注解</p><p>配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;select</span> <span class="string">id=&quot;getUserById&quot; resultType=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="attr">select</span> <span class="string">* from t_user where id = #&#123;id&#125;</span></span><br><span class="line"><span class="attr">&lt;select&gt;</span></span><br></pre></td></tr></table></figure><p>在查询时，如果查询的是一个实体类对象，那么就会返回一个user对象，如果是多个结果且都属于一个实体类，那么就返回一个list；</p><p>注意，返回值为多的时候，接口的返回值就应该是List，用User类尝试去接收List会导致报错；</p><p>增删改操作返回的受影响行数：直接使用 int 或 long 类型接收即可</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>适用于SQL查询返回的各个字段综合起来并不和任何一个现有的实体类对应，没法封装到实体类对象中。<strong>能够封装成实体类类型的，就不使用Map类型。</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Map&lt;String,Object&gt;</span> <span class="string">selectEmpNameAndMaxSalary();</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;!--</span> <span class="string">Map&lt;String,Object&gt; selectEmpNameAndMaxSalary(); --&gt;</span></span><br><span class="line"><span class="attr">&lt;!--</span> <span class="string">返回工资最高的员工的姓名和他的工资 --&gt;</span></span><br><span class="line"><span class="attr">&lt;select</span> <span class="string">id=&quot;selectEmpNameAndMaxSalary&quot; resultType=&quot;map&quot;&gt;</span></span><br><span class="line">        <span class="attr">SELECT</span></span><br><span class="line">            <span class="attr">emp_name</span> <span class="string">员工姓名,</span></span><br><span class="line">            <span class="attr">emp_salary</span> <span class="string">员工工资,</span></span><br><span class="line">            <span class="attr">(SELECT</span> <span class="string">AVG(emp_salary) FROM t_emp) 部门平均工资</span></span><br><span class="line">        <span class="attr">FROM</span> <span class="string">t_emp WHERE emp_salary=(</span></span><br><span class="line">            <span class="attr">SELECT</span> <span class="string">MAX(emp_salary) FROM t_emp</span></span><br><span class="line">        <span class="attr">)</span></span><br><span class="line"><span class="attr">&lt;/select&gt;</span></span><br></pre></td></tr></table></figure><p>这样返回的就是一个map,在这个map里，key为字段名，value为实际的值，当然这里只是单行查询的情况；<strong>当查询返回null为value时，null不会被加入到map中；</strong></p><p>在多条map时， 这样回报错，也就是说多条数据不能直接塞到同一个map里；可以用List集合接收；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">List&lt;Map&lt;String,Object&gt;&gt;</span> <span class="string">getAllUserToMap();</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapper.getAllUserToMap();</span><br></pre></td></tr></table></figure><p>返回一个List，List里又包含多个Map；</p><p>或者，我们会使用MapKey注解，用Map来放Map，通过mapkey来指定一个属性作为key；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String,Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>这时输出的大map，key为id，value为一个map，这个map里也包含了这个id；</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230116160207-rd0ioew.png" alt="image">​</p><p>这个大key要注意不可重复性；</p><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230116161312-d08y1mv.png" alt="image">​</p><p>都是拼接字符串实现，其中使用较多的是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> xxx <span class="keyword">where</span> xxx <span class="keyword">like</span> &quot;%&quot;#&#123;xxx&#125;&quot;%&quot;</span><br></pre></td></tr></table></figure><h2 id="用添加功能获取自增主键"><a href="#用添加功能获取自增主键" class="headerlink" title="用添加功能获取自增主键"></a>用添加功能获取自增主键</h2><p>例如功能，有两表clazz班级表和student学生表；要实现这样一个功能：</p><ol><li>添加班级</li><li>获取新添加的班级id(id是自增主键，不是我们输入的)</li><li>为班级分配学生，也就是把学生的班级id修改为新添加的般的的id；</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void insertUser(<span class="keyword">User</span> <span class="keyword">user</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">insert</span> id<span class="operator">=</span>&quot;insertUser&quot; useGeneratedKeys<span class="operator">=</span>&quot;true&quot; keyProperty<span class="operator">=</span>&quot;id&quot;<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 。。。常规<span class="keyword">sql</span></span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">insert</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>这里涉及到两个参数：useGeneratedKeys&#x3D;”true” 和keyProperty&#x3D;”id”,前者表示”允许返回自增主键的值”，至于后者，首先jdbc中增删改的返回值一定是修改数据的行数，至于如何拿到这个主键，则需要通过传入对象来获取；</p><p>比如，user需要id，gender，name这三个属性，而id自增，则调用时只需要传入<strong>null</strong>，性别，姓名这样的参数，在方法调用后，<strong>null就会修改为自增主键的值，执行前无id，执行后有id</strong>；实际上赋值给哪个参数都是允许的；</p><h1 id="自定义映射"><a href="#自定义映射" class="headerlink" title="自定义映射"></a>自定义映射</h1><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>SQL表的列名和类的属性名不一致时，需要创建自定义映射；传统的，可以使用<strong>别名</strong>的方式解决；</p><p>一般SQL的列名是xxx_xxx的命名规则，而java中的属性，一般是xxxXxx的命名；<strong>Mybatis的核心配置里&lt;setting&gt;可以设置一个全局配置</strong>，可以自动把下划线命名映射到驼峰命名；</p><p>&lt;seeting name&#x3D;”mapUdenerscoreToCamelCase” value&#x3D;”true”&#x2F;&gt;</p><p>比如emp_id就会映射为empId，user_name就是userName；</p><h2 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h2><p>使用resultMap标签定义对应关系，再在后面的SQL语句中引用这个对应关系，注意这里对于主键属性和非主键属性的处理是不一样的；(id和colum)</p><p>在配置文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 专门声明一个resultMap设定column到property之间的对应关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByRMResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 使用id标签设置主键列和主键属性之间的对应关系 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column属性用于指定字段名；property属性用于指定Java实体类属性名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 使用result标签设置普通字段和Java实体类属性之间的关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_salary&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empSalary&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- Employee selectEmployeeByRM(Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByRM&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;selectEmployeeByRMResultMap&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_salary from t_emp where emp_id=#&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样返回时返回的就是特定的resultMap, 对于结果，key就是指定的id，value就是上面的属性，最后返回的就是<code>&lt;resultMap id=&quot;selectEmployeeByRMResultMap&quot; type=&quot;com.atguigu.mybatis.entity.Employee&quot;&gt; </code>​，这里所对应的类Employee；</p><h1 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h1><h2 id="数量和方向"><a href="#数量和方向" class="headerlink" title="数量和方向"></a>数量和方向</h2><ol><li><p>数量关系</p><p> 主要体现在数据库表中</p><p> 一对一</p><p> 夫妻关系，人和身份证号</p><p> 一对多<br> 用户和用户的订单，锁和钥匙</p><p> 多对多<br> 老师和学生，部门和员工</p></li><li><p>方向</p><p> 主要体现在Java实体类中</p><ul><li><p>双向：双方都可以访问到对方</p><ul><li>Customer：包含Order的集合属性</li><li>Order：包含单个Customer的属性</li></ul></li><li><p>单向：双方中只有一方能够访问到对方</p><ul><li>Customer：不包含Order的集合属性，访问不到Order</li><li>Order：包含单个Customer的属性</li></ul></li></ul></li></ol><p>简单来说，一对一对应的就是一个对象，一对多对应的就是一个集合；</p><h2 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h2><p>比如Emp员工类包含几个属性：empId，empName，age，gender和一个Dept类型的部门属性，但是就表结构来说，通过join查询得到的数据是empId，empName，age，gender和Dpet表获取的deptName共五个数据，那么如何把deptName属性给到Dept类型呢；</p><p>SQL</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230116233342-ck86f8r.png" alt="image">​</p><p>表结构</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230116233445-ffizstd.png" alt="image">​</p><p>结果例</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230116233515-v1i6imn.png" alt="image">​</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230116233536-m8ionyt.png" alt="image"></p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230116233745-vydie2p.png" alt="image">​</p><p>也就是说，dept_name显然和Dept这个class是不对应的，要解决的就是<strong>如何将字段直接映射成对象属性的问题</strong>；</p><h3 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h3><p>必须使用resultMap处理；处理Emp类型的映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMap&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">Emp本身的属性映射略，重点关注Dept</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptId&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span>&gt;</span></span><br><span class="line">这里的dept就是Emp这个类内的一个属性，</span><br><span class="line">也就是Dept类-dept，通过dept来调其中的属性dept_id;</span><br><span class="line">dept_name也是同理的</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230116234328-91pxn1x.png" alt="image">​</p><p>这样，结果就可以查询出来了(注意先重写toString方法)</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230116234905-gb9f1qw.png" alt="image">​</p><p>切记，这里的resultMap是映射给Emp，给Emp内的特殊属性Dept，再调用内部的属性映射；</p><h3 id="association"><a href="#association" class="headerlink" title="association"></a>association</h3><p>用于处理实体类类型的属性，包括一对一，多对一；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">指定sql查询出来的字段名</span></span></span><br><span class="line"><span class="tag"><span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">映射到的java实体类，也就是属性的类型</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span> = <span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">主键-dept_id指向为Dept类型下的deptId属性；</span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span> = <span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span></span><br><span class="line">非主键属性，映射；</span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这就是association的配置</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117115627-2b5u927.png" alt="image">​</p><h3 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h3><p>首先，第一个sql</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">          select * from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 和常规的select一样，返回一个结果集，重点就在于这个结果集的配置，在这个sql里，查询到的是emp表的所有信息；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">select</span>=<span class="string">&quot;&quot;</span> <span class="attr">column</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在resultmap的association标签里，又引入了几个新属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select=&quot;&quot; column=&quot;&quot;</span><br></pre></td></tr></table></figure><p>select绑定第二个sql语句，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Dpet getEmpAndDpetByStepTwo(@Param(&quot;deptId&quot;)</span><br><span class="line">Integer deprId); 接口方法</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDpetByStepTwo&quot;</span> <span class="attr">resultType</span>=</span></span><br><span class="line"><span class="tag"><span class="string">&quot;Dept&quot;</span> <span class="attr">这里当然也可以配置resultMap</span>&gt;</span></span><br><span class="line">select * from t_dept where dept_id =#&#123;deptId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关联俩个sql，在之前的sql-asscociation里：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;com.xxx.getEmpAndDpetByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">这里select要通过全类名.xxxMapper.方法名定位</span>； </span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">这里的column写法的是列名</span>，<span class="attr">也就是第一个sql给下一个sql的条件</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><p>总之，整个过程就是，第一条sql：<code>select * from t_emp where emp_id = #&#123;empId&#125;</code>​查询出来了emp的数据，在association中配置，调用第二条sql，指定返回值为属性dept，同时把第一条sql的结果中的dept_id作为参数给到第二条sql；<code>select * from t_dept where dept_id =#&#123;deptId&#125; </code>​在resultMap里映射了他返回Dept类型，把Dept类型最后给到dept属性；<img src="https://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img001-1.0fe876b1.png" alt="./images">​</p><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><p>比如查询到Customer的时候，不一定会使用Order的List集合数据。如果Order的集合数据始终没有使用，那么这部分数据占用的内存就浪费了。对此，我们希望<strong>不一定会被用到的数据，能够在需要使用的时候再去查询</strong>。</p><p>例如：对Customer进行1000次查询中，其中只有15次会用到Order的集合数据，那么就在需要使用时才去查询能够<strong>大幅度节约内存空间</strong>。</p><p>延迟加载的概念：对于实体类关联的属性到需要使用时才查询。也叫懒加载。</p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用settings对Mybatis全局进行设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启延迟加载功能：需要配置两个配置项 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1、将lazyLoadingEnabled设置为true，开启懒加载功能 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2、将aggressiveLazyLoading设置为false，关闭“积极的懒加载” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在高版本中，则</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis全局配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启延迟加载功能 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">ggressiveLazyLoading在高版本默认就为false；</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么在使用时，比如上面的emp和dept，如果我们查询了一个emp结果，但是在之后的的代码里没有对emp的dept这个属性操作，那么就只会执行第一条sql而不会执行第二条sql，反之，如果需要dept属性，则又会执行二条sql；总之就是先查询第一个sql本身，在需要内部某特殊属性时再调用第二条sql查询；</p><p>当然，也可以对某一条sql设置延迟加载而不使用全局配置，比如：<em>fatchType&#x3D;“eager&#x2F;lazy</em>”，在分布查询的连接association里使用这个属性来设置是否开启这组分布查询sql的延迟加载，默认遵循全局配置；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">fatchType</span>=<span class="string">“eager”</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;com.xxx.getEmpAndDpetByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">这里select要通过全类名.xxxMapper.方法名定位</span>； </span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">这里的column写法的是列名</span>，<span class="attr">也就是第一个sql给下一个sql的条件</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><h3 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h3><p>类似association；区别在于collection处理一对多的关系，和association内部关注ofType属性而不是javaType属性</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117143919-rdte19w.png" alt="image">​</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117144031-6qpej3a.png" alt="image">​</p><h3 id="分步"><a href="#分步" class="headerlink" title="分步"></a>分步</h3><p>第一个sql</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117144819-shfc1r2.png" alt="image">​</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117144924-lghb8sn.png" alt="image">​</p><p>第二个sql</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117145240-czdo8hl.png" alt="image">​</p><p>组合</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117145307-0f1e2n0.png" alt="image">​</p><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><p>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题。</p><h2 id="If和Where"><a href="#If和Where" class="headerlink" title="If和Where"></a>If和Where</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByCondition(Employee employee); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_salary from t_emp</span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- where标签会自动去掉“标签体内前面多余的and/or” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用if标签，让我们可以有选择的加入SQL语句的片段。这个SQL语句片段是否要加入整个SQL语句，就看if标签判断的结果是否为true --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在if标签的test属性中，可以访问实体类的属性，不可以访问数据库表的字段 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 在if标签内部，需要访问接口的参数时还是正常写#&#123;&#125; --&gt;</span></span><br><span class="line">            or emp_name=#&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;gt;</span> 2000&quot;</span>&gt;</span></span><br><span class="line">            or emp_salary&gt;#&#123;empSalary&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         第一种情况：所有条件都满足 WHERE emp_name=? or emp_salary&gt;?</span></span><br><span class="line"><span class="comment">         第二种情况：部分条件满足 WHERE emp_salary&gt;?</span></span><br><span class="line"><span class="comment">         第三种情况：所有条件都不满足 没有where子句</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重点，若包含满足的条件，where标签会生成where关键字并且自动去掉标签体内前面多余的and&#x2F;or；</p><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p>使用trim标签控制条件部分两端是否包含某些字符</p><ul><li>prefix属性：指定要动态添加的前缀</li><li>suffix属性：指定要动态添加的后缀</li><li>prefixOverrides属性：指定要动态去掉的前缀，使用“|”分隔有可能的多个值</li><li>suffixOverrides属性：指定要动态去掉的后缀，使用“|”分隔有可能的多个值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByConditionByTrim(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByConditionByTrim&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_age,emp_salary,emp_gender</span><br><span class="line">    from t_emp</span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- prefix属性指定要动态添加的前缀 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- suffix属性指定要动态添加的后缀 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- prefixOverrides属性指定要动态去掉的前缀，使用“|”分隔有可能的多个值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- suffixOverrides属性指定要动态去掉的后缀，使用“|”分隔有可能的多个值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当前例子用where标签实现更简洁，但是trim标签更灵活，可以用在任何有需要的地方 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            emp_name=#&#123;empName&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;gt;</span> 3000&quot;</span>&gt;</span></span><br><span class="line">            emp_salary&gt;#&#123;empSalary&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empAge <span class="symbol">&amp;lt;</span>= 20&quot;</span>&gt;</span></span><br><span class="line">            emp_age=#&#123;empAge&#125; or</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empGender==&#x27;male&#x27;&quot;</span>&gt;</span></span><br><span class="line">            emp_gender=#&#123;empGender&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="choose-x2F-when-x2F-otherwise"><a href="#choose-x2F-when-x2F-otherwise" class="headerlink" title="choose&#x2F;when&#x2F;otherwise"></a>choose&#x2F;when&#x2F;otherwise</h2><p>在多个分支条件中，仅执行一个。</p><ul><li>从上到下依次执行条件判断</li><li>遇到的第一个满足条件的分支会被采纳</li><li>被采纳分支后面的分支都将不被考虑</li><li>如果所有的when分支都不满足，那么就执行otherwise分支，类似于if-else；</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByConditionByChoose(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByConditionByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_salary from t_emp</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span>emp_name=#&#123;empName&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;lt;</span> 3000&quot;</span>&gt;</span>emp_salary <span class="symbol">&amp;lt;</span> 3000<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>1=1<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     第一种情况：第一个when满足条件 where emp_name=?</span></span><br><span class="line"><span class="comment">     第二种情况：第二个when满足条件 where emp_salary &lt; 3000</span></span><br><span class="line"><span class="comment">     第三种情况：两个when都不满足 where 1=1 执行了otherwise</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>实际开发时，对一个实体类对象进行更新。往往不是更新所有字段，而是更新一部分字段。此时页面上的表单往往不会给不修改的字段提供表单项。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5232&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">年  龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userAge&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">性  别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userGender&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">坐  标：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPosition&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用户名：&lt;input type=&quot;text&quot; name=&quot;userName&quot; /&gt;&lt;br/&gt;   --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 余  额：&lt;input type=&quot;text&quot; name=&quot;userBalance&quot; /&gt;&lt;br/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等  级：&lt;input type=&quot;text&quot; name=&quot;userGrade&quot; /&gt;&lt;br/&gt;  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如上面的表单，如果服务器端接收表单时，使用的是User这个实体类，那么userName、userBalance、userGrade接收到的数据就是null。</p><p>如果不加判断，直接用User对象去更新数据库，在Mapper配置文件中又是每一个字段都更新，那就会把userName、userBalance、userGrade设置为null值，从而造成数据库表中对应数据被破坏。</p><p>此时需要我们在Mapper配置文件中，对update语句的set子句进行定制，此时就可以使用动态SQL的set标签。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- void updateEmployeeDynamic(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeDynamic&quot;</span>&gt;</span></span><br><span class="line">    update t_emp</span><br><span class="line">    <span class="comment">&lt;!-- set emp_name=#&#123;empName&#125;,emp_salary=#&#123;empSalary&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用set标签动态管理set子句，并且动态去掉两端多余的逗号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            emp_name=#&#123;empName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;lt;</span> 3000&quot;</span>&gt;</span></span><br><span class="line">            emp_salary=#&#123;empSalary&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where emp_id=#&#123;empId&#125;</span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         第一种情况：所有条件都满足 SET emp_name=?, emp_salary=?</span></span><br><span class="line"><span class="comment">         第二种情况：部分条件满足 SET emp_salary=?</span></span><br><span class="line"><span class="comment">         第三种情况：所有条件都不满足 update t_emp where emp_id=?</span></span><br><span class="line"><span class="comment">            没有set子句的update语句会导致SQL语法错误</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    collection属性：要遍历的集合</span></span><br><span class="line"><span class="comment">    item属性：遍历集合的过程中能得到每一个具体对象，在item属性中设置一个名字，将来通过这个名字引用遍历出来的对象</span></span><br><span class="line"><span class="comment">    separator属性：指定当foreach标签的标签体重复拼接字符串时，各个标签体字符串之间的分隔符</span></span><br><span class="line"><span class="comment">    open属性：指定整个循环把字符串拼好后，字符串整体的前面要添加的字符串</span></span><br><span class="line"><span class="comment">    close属性：指定整个循环把字符串拼好后，字符串整体的后面要添加的字符串</span></span><br><span class="line"><span class="comment">    index属性：这里起一个名字，便于后面引用</span></span><br><span class="line"><span class="comment">        遍历List集合，这里能够得到List集合的索引值</span></span><br><span class="line"><span class="comment">        遍历Map集合，这里能够得到Map集合的key</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;values&quot;</span> <span class="attr">index</span>=<span class="string">&quot;myIndex&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在foreach标签内部如果需要引用遍历得到的具体的一个对象，需要使用item属性声明的名称 --&gt;</span></span><br><span class="line">    (#&#123;emp.empName&#125;,#&#123;myIndex&#125;,#&#123;emp.empSalary&#125;,#&#123;emp.empGender&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117172322-ohe9cgc.png" alt="image">​</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117172657-ktvak5f.png" alt="image">​</p><h3 id="批量更新时需要注意"><a href="#批量更新时需要注意" class="headerlink" title="批量更新时需要注意"></a>批量更新时需要注意</h3><p>上面批量插入的例子本质上是一条SQL语句，而实现批量更新则需要多条SQL语句拼起来，用分号分开。也就是一次性发送多条SQL语句让数据库执行。此时需要在数据库连接信息的URL地址中设置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">atguigu.dev.url=jdbc:mysql://192.168.198.100:3306/mybatis-example?allowMultiQueries=true</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- int updateEmployeeBatch(@Param(&quot;empList&quot;) List&lt;Employee&gt; empList) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeBatch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        update t_emp set emp_name=#&#123;emp.empName&#125; where emp_id=#&#123;emp.empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SQL标签"><a href="#SQL标签" class="headerlink" title="SQL标签"></a>SQL标签</h2><p>抽取重复的SQL片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用sql标签抽取重复出现的SQL片段 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;mySelectSql&quot;</span>&gt;</span></span><br><span class="line">        select emp_id,emp_name,emp_age,emp_salary,emp_gender from t_emp</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用include标签引用声明的SQL片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;mySelectSql&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117173303-xdo3shv.png" alt="image">​</p><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><ul><li>一级缓存：SqlSession级别</li><li>二级缓存：SqlSessionFactory级别</li></ul><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>一级缓存失效的情况</p><ul><li>不是同一个SqlSession</li><li>同一个SqlSession但是查询条件发生了变化</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li><li>同一个SqlSession两次查询期间提交了事务</li></ul><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查间的结果会被缓存；</p><p>此后，若再次执行相同的查询语句，结果就会从缓存中获取</p><p>二级缓存开启的条件：</p><ol><li>在核心配置文件中，设置全局配置属性cacheEnabled正”true”,默认为true,不需要设置</li><li>在映射文件中设置标签<cache/></li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现<strong>序列化的接口</strong></li></ol><p>使二级缓存失效的情况：<br>两次查询之间执行了任意的增册改，会使一级和二级缓存同时失效</p><h2 id="二级缓存相关配置"><a href="#二级缓存相关配置" class="headerlink" title="二级缓存相关配置"></a>二级缓存相关配置</h2><p>在Mapper配置文件中添加的cache标签可以设置一些属性：</p><ul><li>eviction属性：缓存回收策略<br>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。<br>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。<br>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。<br>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。<br>默认的是 LRU。</li><li>flushInterval属性：刷新间隔，单位毫秒<br>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</li><li>size属性：引用数目，正整数<br>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li><li>readOnly属性：只读，true&#x2F;false<br>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。<br>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。</li></ul><h2 id="查询顺序"><a href="#查询顺序" class="headerlink" title="查询顺序"></a>查询顺序</h2><ol><li>二级缓存</li><li>一级缓存</li><li>数据库</li></ol><h2 id="第三方缓存EhCache"><a href="#第三方缓存EhCache" class="headerlink" title="*第三方缓存EhCache"></a>*第三方缓存EhCache</h2><ol><li><p>导入Maven依赖</p><table><thead><tr><th>jar包名称</th><th>作用</th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td>ehcache</td><td>EHCache核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td>logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table></li><li><p>创建EHCache配置文件</p><p> <img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117230021-zg6c094.png" alt="image">​</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>指定缓存管理器的具体类型</p><p> 还是到查询操作所在的Mapper配置文件中，找到之前设置的cache标签：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>日志</p><p> 存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。</p><p> 门面：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>JCL（Jakarta Commons Logging）</td><td>陈旧</td></tr><tr><td>SLF4J（Simple Logging Facade for Java）★</td><td>适合</td></tr><tr><td>jboss-logging</td><td>特殊专业领域使用</td></tr></tbody></table><p> 实现：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>log4j★</td><td>最初版</td></tr><tr><td>JUL（java.util.logging）</td><td>JDK自带</td></tr><tr><td>log4j2</td><td>Apache收购log4j后全面重构，内部实现和log4j完全不同</td></tr><tr><td>logback★</td><td>优雅、强大</td></tr></tbody></table></li><li><p>logback配置文件</p><p> <img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117230258-ozqas6d.png" alt="image"></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>EHCache配置文件说明</p><p> 当借助CacheManager.add(“缓存名称”)创建Cache时，EhCache便会采用<defalutCache/>指定的的管理策略</p><table><thead><tr><th>属性名</th><th>是否必须</th><th>作用</th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。<br />如果为true，则缓存的数据始终有效，<br />如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，<br />这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>timeToLiveSeconds</td><td>否</td><td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，<br />相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。<br />默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）</td></tr></tbody></table></li></ol><h1 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h1><ul><li><p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的。</p></li><li><p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：</p><ul><li>Java实体类</li><li>Mapper接口</li><li>Mapper配置文件</li></ul></li></ul><h2 id="生成逆向工程"><a href="#生成逆向工程" class="headerlink" title="生成逆向工程"></a>生成逆向工程</h2><p>Maven配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MBG配置</p><p>文件名必须是：generatorConfig.xml</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117231823-zeecj72.png" alt="image">​</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">                    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">                    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://192.168.198.100:3306/mybatis-example&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;atguigu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.entity&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Employee&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_customer&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Customer&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_order&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Order&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意<code>&lt;jdbcConnection&gt;</code>的修改和目标路径的配置 <code>&lt;javaModelGenerator targetPackage=&quot;com.atguigu.mybatis.entity&quot; targetProject=&quot;.\src\main\java&quot;&gt;</code></p><p>maven-执行MBG插件的generate目标<br>​<img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230117232950-3ahnqem.png" alt="image">​</p><h2 id="QBC查询"><a href="#QBC查询" class="headerlink" title="QBC查询"></a>QBC查询</h2><p>QBC查询最大的特点就是将SQL语句中的WHERE子句进行了组件化的封装，让我们可以通过调用Criteria对象的方法自由的拼装查询条件。</p><p>对于自动生成的条件查询，需要使用QBC查询去调用；</p><p>类似这样的方法，需要传入一个xxxExample的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Dept&gt; <span class="title function_">selectByExample</span><span class="params">(DeptExample example)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByExample&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.DeptExample&quot;</span> &gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    WARNING - @mbggenerated</span></span><br><span class="line"><span class="comment">    This element is automatically generated by MyBatis Generator, do not modify.</span></span><br><span class="line"><span class="comment">    This element was generated on Tue Jan 17 23:29:02 CST 2023.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  select</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;distinct&quot;</span> &gt;</span></span><br><span class="line">    distinct</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span></span><br><span class="line">  from t_dept</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_parameter != null&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Example_Where_Clause&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;orderByClause != null&quot;</span> &gt;</span></span><br><span class="line">    order by $&#123;orderByClause&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>QBC查询例，也就是通过创建xxxExample的对象，通过这个对象再去创建Criteria对象，通过Criteria对象就可以给SQL语句添加条件；添加的条件andXxxxx可以一直追加；</p><p>那么对于or的连接， </p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230118114238-pcmyoy4.png" alt="image">​</p><p>也只需要再次掉用example对象，调用or方法后继续调用andXxx方法，即相当于xxx and xxx or xxx and xxx这样的形式；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建EmployeeExample对象</span></span><br><span class="line"><span class="type">EmployeeExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmployeeExample</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.通过example对象创建Criteria对象</span></span><br><span class="line">EmployeeExample.<span class="type">Criteria</span> <span class="variable">criteria01</span> <span class="operator">=</span> example.createCriteria();</span><br><span class="line">EmployeeExample.<span class="type">Criteria</span> <span class="variable">criteria02</span> <span class="operator">=</span> example.or();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.在Criteria对象中封装查询条件</span></span><br><span class="line">criteria01</span><br><span class="line">    .andEmpAgeBetween(<span class="number">9</span>, <span class="number">99</span>)</span><br><span class="line">    .andEmpNameLike(<span class="string">&quot;%o%&quot;</span>)</span><br><span class="line">    .andEmpGenderEqualTo(<span class="string">&quot;male&quot;</span>)</span><br><span class="line">    .andEmpSalaryGreaterThan(<span class="number">500.55</span>);</span><br><span class="line"></span><br><span class="line">criteria02</span><br><span class="line">        .andEmpAgeBetween(<span class="number">9</span>, <span class="number">99</span>)</span><br><span class="line">        .andEmpNameLike(<span class="string">&quot;%o%&quot;</span>)</span><br><span class="line">        .andEmpGenderEqualTo(<span class="string">&quot;male&quot;</span>)</span><br><span class="line">        .andEmpSalaryGreaterThan(<span class="number">500.55</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.基于Criteria对象进行查询</span></span><br><span class="line">List&lt;Employee&gt; employeeList = mapper.selectByExample(example);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Employee employee : employeeList) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;employee = &quot;</span> + employee);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终SQL的效果：</span></span><br><span class="line"><span class="comment">// WHERE ( emp_age between ? and ? and emp_name like ? and emp_gender = ? and emp_salary &gt; ? ) or( emp_age between ? and ? and emp_name like ? and emp_gender = ? and emp_salary &gt; ? )</span></span><br></pre></td></tr></table></figure><h1 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h1><p>limit index,pageSize</p><p>pageSize：每页显示的条数</p><p>pageNum：当前页的页码</p><p>index：当前页的第一条数据的索引，index&#x3D;(pageNum-1)*pageSize</p><p>‍</p><p>count：总记录数</p><p>totalPage：总页数</p><p>totalPage &#x3D; count &#x2F; pageSize;</p><p>解决最后一页的，数据不足一页情况：</p><p>if(count % pageSize !&#x3D; 0){</p><p>totalPage +&#x3D; 1;</p><p>}</p><p>‍</p><p>pageSize&#x3D;4，pageNum&#x3D;1，index&#x3D;0 limit 0,4</p><p>pageSize&#x3D;4，pageNum&#x3D;3，index&#x3D;8 limit 8,4</p><p>pageSize&#x3D;4，pageNum&#x3D;6，index&#x3D;20 limit 20,4</p><p>‍</p><p>首页 上一页 2 3 4 5 6 下一页 末页</p><h2 id="使用分页插件"><a href="#使用分页插件" class="headerlink" title="使用分页插件"></a>使用分页插件</h2><h3 id="添加依赖和添加插件"><a href="#添加依赖和添加插件" class="headerlink" title="添加依赖和添加插件"></a>添加依赖和添加插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在MyBatis的核心配置文件中配置插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>依附于查询功能</p><ol><li><p>在查询功能之前开启查询功能；</p><p> 使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能</p><p> 其中</p><p> pageNum：当前页的页码</p><p> pageSize：每页显示的条数</p></li><li><p>在查询获取list集合之后：</p><p> 使用<code>PageInfo pageInfo = new PageInfo&lt;&gt;(List list, intnavigatePages)</code>获取分页相关数据</p><p> ist：分页之后的数据</p><p> navigatePages：导航分页的页码数</p></li></ol><p><code>PageHelper.startPage(int pageNum, int pageSize)</code>​方法会返回一个page对象，这个对象包含page信息和内容信息；</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230118125102-mpqgq4w.png" alt="image">​</p><p>PageInfo<T>,T是查询的对象，这个方法接收一个list对象(也就是查询的list)和导航分页个数；</p><p><img src="https://cdn.staticaly.com/gh/hakinanako/pic_bed@main/MyBatis/assets/image-20230118125326-kbmdrgg.png" alt="image">​</p><p>PageInfo内部的数据更多，如</p><p>PageInfo{</p><p>pageNum&#x3D;8, pageSize&#x3D;4, size&#x3D;2, startRow&#x3D;29, endRow&#x3D;30, total&#x3D;30, pages&#x3D;8,</p><p>list&#x3D;Page{count&#x3D;true, pageNum&#x3D;8, pageSize&#x3D;4, startRow&#x3D;28, endRow&#x3D;32, total&#x3D;30,</p><p>pages&#x3D;8, reasonable&#x3D;false, pageSizeZero&#x3D;false},</p><p>prePage&#x3D;7, nextPage&#x3D;0, isFirstPage&#x3D;false, isLastPage&#x3D;true, hasPreviousPage&#x3D;true,</p><p>hasNextPage&#x3D;false, navigatePages&#x3D;5, navigateFirstPage4, navigateLastPage8,</p><p>navigatepageNums&#x3D;[4, 5, 6, 7, 8]</p><p>}</p><p>pageNum：当前页的页码</p><p>pageSize：每页显示的条数</p><p>size：当前页显示的真实条数</p><p>total：总记录数</p><p>pages：总页数</p><p>prePage：上一页的页码</p><p>nextPage：下一页的页码</p><p>isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页</p><p>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页</p><p>navigatePages：导航分页的页码数</p><p>navigatepageNums：导航分页的页码，[1,2,3,4,5]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>欢迎光临</title>
      <link href="/2023/01/19/01/"/>
      <url>/2023/01/19/01/</url>
      
        <content type="html"><![CDATA[<h1 id="不知道写啥就随便写写"><a href="#不知道写啥就随便写写" class="headerlink" title="不知道写啥就随便写写"></a>不知道写啥就随便写写</h1>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
